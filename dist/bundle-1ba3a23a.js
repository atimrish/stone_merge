/*! For license information please see bundle-1ba3a23a.js.LICENSE.txt */
(()=>{"use strict";var e={221:(e,t,n)=>{var r=n(540);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var o={d:{f:a,r:function(){throw Error(l(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(l(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:a}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.1.1"},247:(e,t,n)=>{var r=n(982),l=n(540),a=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function u(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function s(e){if(i(e)!==e)throw Error(o(188))}function c(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=c(e)))return t;e=e.sibling}return null}var f=Object.assign,d=Symbol.for("react.element"),p=Symbol.for("react.transitional.element"),m=Symbol.for("react.portal"),h=Symbol.for("react.fragment"),g=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),y=Symbol.for("react.provider"),b=Symbol.for("react.consumer"),k=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),S=Symbol.for("react.suspense"),x=Symbol.for("react.suspense_list"),E=Symbol.for("react.memo"),C=Symbol.for("react.lazy");Symbol.for("react.scope");var _=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var N=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var P=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var L=Symbol.for("react.client.reference");function T(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===L?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case h:return"Fragment";case v:return"Profiler";case g:return"StrictMode";case S:return"Suspense";case x:return"SuspenseList";case _:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case m:return"Portal";case k:return(e.displayName||"Context")+".Provider";case b:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case E:return null!==(t=e.displayName||null)?t:T(e.type)||"Memo";case C:t=e._payload,e=e._init;try{return T(e(t))}catch(e){}}return null}var O=Array.isArray,R=l.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,M=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,A={pending:!1,data:null,method:null,action:null},D=[],F=-1;function j(e){return{current:e}}function I(e){0>F||(e.current=D[F],D[F]=null,F--)}function U(e,t){F++,D[F]=e.current,e.current=t}var H=j(null),B=j(null),V=j(null),$=j(null);function W(e,t){switch(U(V,t),U(B,e),U(H,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?rf(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=lf(t=rf(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}I(H),U(H,e)}function q(){I(H),I(B),I(V)}function Q(e){null!==e.memoizedState&&U($,e);var t=H.current,n=lf(t,e.type);t!==n&&(U(B,e),U(H,n))}function G(e){B.current===e&&(I(H),I(B)),$.current===e&&(I($),Gf._currentValue=A)}var Y=Object.prototype.hasOwnProperty,K=r.unstable_scheduleCallback,X=r.unstable_cancelCallback,J=r.unstable_shouldYield,Z=r.unstable_requestPaint,ee=r.unstable_now,te=r.unstable_getCurrentPriorityLevel,ne=r.unstable_ImmediatePriority,re=r.unstable_UserBlockingPriority,le=r.unstable_NormalPriority,ae=r.unstable_LowPriority,oe=r.unstable_IdlePriority,ie=r.log,ue=r.unstable_setDisableYieldValue,se=null,ce=null;function fe(e){if("function"==typeof ie&&ue(e),ce&&"function"==typeof ce.setStrictMode)try{ce.setStrictMode(se,e)}catch(e){}}var de=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(pe(e)/me|0)|0},pe=Math.log,me=Math.LN2,he=256,ge=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ye(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var l=0,a=e.suspendedLanes,o=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!==(r=i&~a)?l=ve(r):0!==(o&=i)?l=ve(o):n||0!==(n=i&~e)&&(l=ve(n)):0!==(i=r&~a)?l=ve(i):0!==o?l=ve(o):n||0!==(n=r&~e)&&(l=ve(n)),0===l?0:0!==t&&t!==l&&0===(t&a)&&((a=l&-l)>=(n=t&-t)||32===a&&4194048&n)?t:l}function be(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ke(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=he;return!(4194048&(he<<=1))&&(he=256),e}function Se(){var e=ge;return!(62914560&(ge<<=1))&&(ge=4194304),e}function xe(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ee(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ce(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-de(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function _e(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-de(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}function Ne(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Pe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function ze(){var e=M.p;return 0!==e?e:void 0===(e=window.event)?32:id(e.type)}var Le=Math.random().toString(36).slice(2),Te="__reactFiber$"+Le,Oe="__reactProps$"+Le,Re="__reactContainer$"+Le,Me="__reactEvents$"+Le,Ae="__reactListeners$"+Le,De="__reactHandles$"+Le,Fe="__reactResources$"+Le,je="__reactMarker$"+Le;function Ie(e){delete e[Te],delete e[Oe],delete e[Me],delete e[Ae],delete e[De]}function Ue(e){var t=e[Te];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Re]||n[Te]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=bf(e);null!==e;){if(n=e[Te])return n;e=bf(e)}return t}n=(e=n).parentNode}return null}function He(e){if(e=e[Te]||e[Re]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Be(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Ve(e){var t=e[Fe];return t||(t=e[Fe]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function $e(e){e[je]=!0}var We=new Set,qe={};function Qe(e,t){Ge(e,t),Ge(e+"Capture",t)}function Ge(e,t){for(qe[e]=t,e=0;e<t.length;e++)We.add(t[e])}var Ye,Ke,Xe=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Je={},Ze={};function et(e,t,n){if(l=t,Y.call(Ze,l)||!Y.call(Je,l)&&(Xe.test(l)?Ze[l]=!0:(Je[l]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var l}function tt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function nt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function rt(e){if(void 0===Ye)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ye=t&&t[1]||"",Ke=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ye+e+Ke}var lt=!1;function at(e,t){if(!e||lt)return"";lt=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch(function(){})}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),o=a[0],i=a[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(l=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;l<s.length&&!s[l].includes("DetermineComponentFrameRoot");)l++;if(r===u.length||l===s.length)for(r=u.length-1,l=s.length-1;1<=r&&0<=l&&u[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(u[r]!==s[l]){if(1!==r||1!==l)do{if(r--,0>--l||u[r]!==s[l]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=l);break}}}finally{lt=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?rt(n):""}function ot(e){switch(e.tag){case 26:case 27:case 5:return rt(e.type);case 16:return rt("Lazy");case 13:return rt("Suspense");case 19:return rt("SuspenseList");case 0:case 15:return at(e.type,!1);case 11:return at(e.type.render,!1);case 1:return at(e.type,!0);case 31:return rt("Activity");default:return""}}function it(e){try{var t="";do{t+=ot(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function st(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=st(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=st(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function dt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function mt(e){return e.replace(pt,function(e){return"\\"+e.charCodeAt(0).toString(16)+" "})}function ht(e,t,n,r,l,a,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?vt(e,o,ut(t)):null!=n?vt(e,o,ut(n)):null!=r&&e.removeAttribute("value"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&"function"!=typeof l&&"symbol"!=typeof l),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+ut(i):e.removeAttribute("name")}function gt(e,t,n,r,l,a,o,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:l)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function vt(e,t,n){"number"===t&&dt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,l=0;l<e.length;l++){if(e[l].value===n)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function kt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(O(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var St=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function xt(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||St.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Et(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var l in t)r=t[l],t.hasOwnProperty(l)&&n[l]!==r&&xt(e,l,r)}else for(var a in t)t.hasOwnProperty(a)&&xt(e,a,t[a])}function Ct(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _t=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Nt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return Nt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var zt=null;function Lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Tt=null,Ot=null;function Rt(e){var t=He(e);if(t&&(e=t.stateNode)){var n=e[Oe]||null;e:switch(e=t.stateNode,t.type){case"input":if(ht(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=r[Oe]||null;if(!l)throw Error(o(90));ht(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var Mt=!1;function At(e,t,n){if(Mt)return e(t,n);Mt=!0;try{return e(t)}finally{if(Mt=!1,(null!==Tt||null!==Ot)&&(Us(),Tt&&(t=Tt,e=Ot,Ot=Tt=null,Rt(t),e)))for(t=0;t<e.length;t++)Rt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Oe]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Ft=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),jt=!1;if(Ft)try{var It={};Object.defineProperty(It,"passive",{get:function(){jt=!0}}),window.addEventListener("test",It,It),window.removeEventListener("test",It,It)}catch(e){jt=!1}var Ut=null,Ht=null,Bt=null;function Vt(){if(Bt)return Bt;var e,t,n=Ht,r=n.length,l="value"in Ut?Ut.value:Ut.textContent,a=l.length;for(e=0;e<r&&n[e]===l[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===l[a-t];t++);return Bt=l.slice(e,1<t?1-t:void 0)}function $t(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Wt(){return!0}function qt(){return!1}function Qt(e){function t(t,n,r,l,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?Wt:qt,this.isPropagationStopped=qt,this}return f(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wt)},persist:function(){},isPersistent:Wt}),t}var Gt,Yt,Kt,Xt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jt=Qt(Xt),Zt=f({},Xt,{view:0,detail:0}),en=Qt(Zt),tn=f({},Zt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kt&&(Kt&&"mousemove"===e.type?(Gt=e.screenX-Kt.screenX,Yt=e.screenY-Kt.screenY):Yt=Gt=0,Kt=e),Gt)},movementY:function(e){return"movementY"in e?e.movementY:Yt}}),nn=Qt(tn),rn=Qt(f({},tn,{dataTransfer:0})),ln=Qt(f({},Zt,{relatedTarget:0})),an=Qt(f({},Xt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=Qt(f({},Xt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Qt(f({},Xt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=fn[e])&&!!t[e]}function pn(){return dn}var mn=Qt(f({},Zt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=$t(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?$t(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?$t(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=Qt(f({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=Qt(f({},Zt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),vn=Qt(f({},Xt,{propertyName:0,elapsedTime:0,pseudoElement:0})),yn=Qt(f({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=Qt(f({},Xt,{newState:0,oldState:0})),kn=[9,13,27,32],wn=Ft&&"CompositionEvent"in window,Sn=null;Ft&&"documentMode"in document&&(Sn=document.documentMode);var xn=Ft&&"TextEvent"in window&&!Sn,En=Ft&&(!wn||Sn&&8<Sn&&11>=Sn),Cn=String.fromCharCode(32),_n=!1;function Nn(e,t){switch(e){case"keyup":return-1!==kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ln[e.type]:"textarea"===t}function On(e,t,n,r){Tt?Ot?Ot.push(r):Ot=[r]:Tt=r,0<(t=Vc(t,"onChange")).length&&(n=new Jt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Rn=null,Mn=null;function An(e){Ac(e,0)}function Dn(e){if(ft(Be(e)))return e}function Fn(e,t){if("change"===e)return t}var jn=!1;if(Ft){var In;if(Ft){var Un="oninput"in document;if(!Un){var Hn=document.createElement("div");Hn.setAttribute("oninput","return;"),Un="function"==typeof Hn.oninput}In=Un}else In=!1;jn=In&&(!document.documentMode||9<document.documentMode)}function Bn(){Rn&&(Rn.detachEvent("onpropertychange",Vn),Mn=Rn=null)}function Vn(e){if("value"===e.propertyName&&Dn(Mn)){var t=[];On(t,Mn,e,Lt(e)),At(An,t)}}function $n(e,t,n){"focusin"===e?(Bn(),Mn=n,(Rn=t).attachEvent("onpropertychange",Vn)):"focusout"===e&&Bn()}function Wn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(Mn)}function qn(e,t){if("click"===e)return Dn(t)}function Qn(e,t){if("input"===e||"change"===e)return Dn(t)}var Gn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Yn(e,t){if(Gn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!Y.call(t,l)||!Gn(e[l],t[l]))return!1}return!0}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Jn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Jn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Zn(e){for(var t=dt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dt((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var tr=Ft&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,lr=null,ar=!1;function or(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ar||null==nr||nr!==dt(r)||(r="selectionStart"in(r=nr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},lr&&Yn(lr,r)||(lr=r,0<(r=Vc(rr,"onSelect")).length&&(t=new Jt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function ir(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:ir("Animation","AnimationEnd"),animationiteration:ir("Animation","AnimationIteration"),animationstart:ir("Animation","AnimationStart"),transitionrun:ir("Transition","TransitionRun"),transitionstart:ir("Transition","TransitionStart"),transitioncancel:ir("Transition","TransitionCancel"),transitionend:ir("Transition","TransitionEnd")},sr={},cr={};function fr(e){if(sr[e])return sr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return sr[e]=n[t];return e}Ft&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var dr=fr("animationend"),pr=fr("animationiteration"),mr=fr("animationstart"),hr=fr("transitionrun"),gr=fr("transitionstart"),vr=fr("transitioncancel"),yr=fr("transitionend"),br=new Map,kr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){br.set(e,t),Qe(t,[e])}kr.push("scrollEnd");var Sr=new WeakMap;function xr(e,t){if("object"==typeof e&&null!==e){var n=Sr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:it(t)},Sr.set(e,t),t)}return{value:e,source:t,stack:it(t)}}var Er=[],Cr=0,_r=0;function Nr(){for(var e=Cr,t=_r=Cr=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var l=Er[t];Er[t++]=null;var a=Er[t];if(Er[t++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&Tr(n,l,a)}}function Pr(e,t,n,r){Er[Cr++]=e,Er[Cr++]=t,Er[Cr++]=n,Er[Cr++]=r,_r|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function zr(e,t,n,r){return Pr(e,t,n,r),Or(e)}function Lr(e,t){return Pr(e,null,null,t),Or(e)}function Tr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var l=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,l&&null!==t&&(l=31-de(n),null===(r=(e=a.hiddenUpdates)[l])?e[l]=[t]:r.push(t),t.lane=536870912|n),a):null}function Or(e){if(50<Ts)throw Ts=0,Os=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Rr={};function Mr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ar(e,t,n,r){return new Mr(e,t,n,r)}function Dr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fr(e,t){var n=e.alternate;return null===n?((n=Ar(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function jr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Ir(e,t,n,r,l,a){var i=0;if(r=e,"function"==typeof e)Dr(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,H.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case _:return(e=Ar(31,n,t,l)).elementType=_,e.lanes=a,e;case h:return Ur(n.children,l,a,t);case g:i=8,l|=24;break;case v:return(e=Ar(12,n,t,2|l)).elementType=v,e.lanes=a,e;case S:return(e=Ar(13,n,t,l)).elementType=S,e.lanes=a,e;case x:return(e=Ar(19,n,t,l)).elementType=x,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case y:case k:i=10;break e;case b:i=9;break e;case w:i=11;break e;case E:i=14;break e;case C:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Ar(i,n,t,l)).elementType=e,t.type=r,t.lanes=a,t}function Ur(e,t,n,r){return(e=Ar(7,e,r,t)).lanes=n,e}function Hr(e,t,n){return(e=Ar(6,e,null,t)).lanes=n,e}function Br(e,t,n){return(t=Ar(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Vr=[],$r=0,Wr=null,qr=0,Qr=[],Gr=0,Yr=null,Kr=1,Xr="";function Jr(e,t){Vr[$r++]=qr,Vr[$r++]=Wr,Wr=e,qr=t}function Zr(e,t,n){Qr[Gr++]=Kr,Qr[Gr++]=Xr,Qr[Gr++]=Yr,Yr=e;var r=Kr;e=Xr;var l=32-de(r)-1;r&=~(1<<l),n+=1;var a=32-de(t)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,Kr=1<<32-de(t)+l|n<<l|r,Xr=a+e}else Kr=1<<a|n<<l|r,Xr=e}function el(e){null!==e.return&&(Jr(e,1),Zr(e,1,0))}function tl(e){for(;e===Wr;)Wr=Vr[--$r],Vr[$r]=null,qr=Vr[--$r],Vr[$r]=null;for(;e===Yr;)Yr=Qr[--Gr],Qr[Gr]=null,Xr=Qr[--Gr],Qr[Gr]=null,Kr=Qr[--Gr],Qr[Gr]=null}var nl=null,rl=null,ll=!1,al=null,ol=!1,il=Error(o(519));function ul(e){throw ml(xr(Error(o(418,"")),e)),il}function sl(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Te]=e,t[Oe]=r,n){case"dialog":Dc("cancel",t),Dc("close",t);break;case"iframe":case"object":case"embed":Dc("load",t);break;case"video":case"audio":for(n=0;n<Rc.length;n++)Dc(Rc[n],t);break;case"source":Dc("error",t);break;case"img":case"image":case"link":Dc("error",t),Dc("load",t);break;case"details":Dc("toggle",t);break;case"input":Dc("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":Dc("invalid",t);break;case"textarea":Dc("invalid",t),kt(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Yc(t.textContent,n)?(null!=r.popover&&(Dc("beforetoggle",t),Dc("toggle",t)),null!=r.onScroll&&Dc("scroll",t),null!=r.onScrollEnd&&Dc("scrollend",t),null!=r.onClick&&(t.onclick=Kc),t=!0):t=!1,t||ul(e)}function cl(e){for(nl=e.return;nl;)switch(nl.tag){case 5:case 13:return void(ol=!1);case 27:case 3:return void(ol=!0);default:nl=nl.return}}function fl(e){if(e!==nl)return!1;if(!ll)return cl(e),ll=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||af(e.type,e.memoizedProps)),t=!t),t&&rl&&ul(e),cl(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){rl=vf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}rl=null}}else 27===n?(n=rl,pf(e.type)?(e=yf,yf=null,rl=e):rl=n):rl=nl?vf(e.stateNode.nextSibling):null;return!0}function dl(){rl=nl=null,ll=!1}function pl(){var e=al;return null!==e&&(null===ys?ys=e:ys.push.apply(ys,e),al=null),e}function ml(e){null===al?al=[e]:al.push(e)}var hl=j(null),gl=null,vl=null;function yl(e,t,n){U(hl,t._currentValue),t._currentValue=n}function bl(e){e._currentValue=hl.current,I(hl)}function kl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wl(e,t,n,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var i=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<t.length;s++)if(u.context===t[s]){a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),kl(a.return,n,e),r||(i=null);break e}a=u.next}}else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(a=i.alternate)&&(a.lanes|=n),kl(i,n,e),i=null}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===e){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}}function Sl(e,t,n,r){e=null;for(var l=t,a=!1;null!==l;){if(!a)if(524288&l.flags)a=!0;else if(262144&l.flags)break;if(10===l.tag){var i=l.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=l.type;Gn(l.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(l===$.current){if(null===(i=l.alternate))throw Error(o(387));i.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(Gf):e=[Gf])}l=l.return}null!==e&&wl(t,e,n,r),t.flags|=262144}function xl(e){for(e=e.firstContext;null!==e;){if(!Gn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function El(e){gl=e,vl=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Cl(e){return Nl(gl,e)}function _l(e,t){return null===gl&&El(e),Nl(e,t)}function Nl(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===vl){if(null===e)throw Error(o(308));vl=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else vl=vl.next=t;return n}var Pl="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach(function(e){return e()})}},zl=r.unstable_scheduleCallback,Ll=r.unstable_NormalPriority,Tl={$$typeof:k,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ol(){return{controller:new Pl,data:new Map,refCount:0}}function Rl(e){e.refCount--,0===e.refCount&&zl(Ll,function(){e.controller.abort()})}var Ml=null,Al=0,Dl=0,Fl=null;function jl(){if(0===--Al&&null!==Ml){null!==Fl&&(Fl.status="fulfilled");var e=Ml;Ml=null,Dl=0,Fl=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Il=R.S;R.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ml){var n=Ml=[];Al=0,Dl=Pc(),Fl={status:"pending",value:void 0,then:function(e){n.push(e)}}}Al++,t.then(jl,jl)}(0,t),null!==Il&&Il(e,t)};var Ul=j(null);function Hl(){var e=Ul.current;return null!==e?e:ns.pooledCache}function Bl(e,t){U(Ul,null===t?Ul.current:t.pool)}function Vl(){var e=Hl();return null===e?null:{parent:Tl._currentValue,pool:e}}var $l=Error(o(460)),Wl=Error(o(474)),ql=Error(o(542)),Ql={then:function(){}};function Gl(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Yl(){}function Kl(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Yl,Yl),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw Zl(e=t.reason),e;default:if("string"==typeof t.status)t.then(Yl,Yl);else{if(null!==(e=ns)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then(function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}},function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw Zl(e=t.reason),e}throw Xl=t,$l}}var Xl=null;function Jl(){if(null===Xl)throw Error(o(459));var e=Xl;return Xl=null,e}function Zl(e){if(e===$l||e===ql)throw Error(o(483))}var ea=!1;function ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function na(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ra(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function la(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ts){var l=r.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),r.pending=t,t=Or(e),Tr(e,null,n),t}return Pr(e,r,t,n),Or(e)}function aa(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,_e(e,n)}}function oa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var l=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?l=a=t:a=a.next=t}else l=a=t;return n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var ia=!1;function ua(){if(ia&&null!==Fl)throw Fl}function sa(e,t,n,r){ia=!1;var l=e.updateQueue;ea=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?a=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==a){var d=l.baseState;for(o=0,c=s=u=null,i=a;;){var p=-536870913&i.lane,m=p!==i.lane;if(m?(ls&p)===p:(r&p)===p){0!==p&&p===Dl&&(ia=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;p=t;var v=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(v,d,p);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(v,d,p):h))break e;d=f({},d,p);break e;case 2:ea=!0}}null!==(p=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=l.callbacks)?l.callbacks=[p]:m.push(p))}else m={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=d):c=c.next=m,o|=p;if(null===(i=i.next)){if(null===(i=l.shared.pending))break;i=(m=i).next,m.next=null,l.lastBaseUpdate=m,l.shared.pending=null}}null===c&&(u=d),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),ds|=o,e.lanes=o,e.memoizedState=d}}function ca(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function fa(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)ca(n[e],t)}var da=j(null),pa=j(0);function ma(e,t){U(pa,e=cs),U(da,t),cs=e|t.baseLanes}function ha(){U(pa,cs),U(da,da.current)}function ga(){cs=pa.current,I(da),I(pa)}var va=0,ya=null,ba=null,ka=null,wa=!1,Sa=!1,xa=!1,Ea=0,Ca=0,_a=null,Na=0;function Pa(){throw Error(o(321))}function za(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Gn(e[n],t[n]))return!1;return!0}function La(e,t,n,r,l,a){return va=a,ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,R.H=null===e||null===e.memoizedState?Wo:qo,xa=!1,a=n(r,l),xa=!1,Sa&&(a=Oa(t,n,r,l)),Ta(e),a}function Ta(e){R.H=$o;var t=null!==ba&&null!==ba.next;if(va=0,ka=ba=ya=null,wa=!1,Ca=0,_a=null,t)throw Error(o(300));null===e||_i||null!==(e=e.dependencies)&&xl(e)&&(_i=!0)}function Oa(e,t,n,r){ya=e;var l=0;do{if(Sa&&(_a=null),Ca=0,Sa=!1,25<=l)throw Error(o(301));if(l+=1,ka=ba=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}R.H=Qo,a=t(n,r)}while(Sa);return a}function Ra(){var e=R.H,t=e.useState()[0];return t="function"==typeof t.then?Ia(t):t,e=e.useState()[0],(null!==ba?ba.memoizedState:null)!==e&&(ya.flags|=1024),t}function Ma(){var e=0!==Ea;return Ea=0,e}function Aa(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Da(e){if(wa){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}wa=!1}va=0,ka=ba=ya=null,Sa=!1,Ca=Ea=0,_a=null}function Fa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ka?ya.memoizedState=ka=e:ka=ka.next=e,ka}function ja(){if(null===ba){var e=ya.alternate;e=null!==e?e.memoizedState:null}else e=ba.next;var t=null===ka?ya.memoizedState:ka.next;if(null!==t)ka=t,ba=e;else{if(null===e){if(null===ya.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(ba=e).memoizedState,baseState:ba.baseState,baseQueue:ba.baseQueue,queue:ba.queue,next:null},null===ka?ya.memoizedState=ka=e:ka=ka.next=e}return ka}function Ia(e){var t=Ca;return Ca+=1,null===_a&&(_a=[]),e=Kl(_a,e,t),t=ya,null===(null===ka?t.memoizedState:ka.next)&&(t=t.alternate,R.H=null===t||null===t.memoizedState?Wo:qo),e}function Ua(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ia(e);if(e.$$typeof===k)return Cl(e)}throw Error(o(438,String(e)))}function Ha(e){var t=null,n=ya.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=ya.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=N;return t.index++,n}function Ba(e,t){return"function"==typeof t?t(e):t}function Va(e){return $a(ja(),ba,e)}function $a(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var i=l.next;l.next=a.next,a.next=i}t.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{var u=i=null,s=null,c=t=l.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(ls&d)===d:(va&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Dl&&(f=!0);else{if((va&p)===p){c=c.next,p===Dl&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=a):s=s.next=d,ya.lanes|=p,ds|=p}d=c.action,xa&&n(a,d),a=c.hasEagerState?c.eagerState:n(a,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=a):s=s.next=p,ya.lanes|=d,ds|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=a:s.next=u,!Gn(a,e.memoizedState)&&(_i=!0,f&&null!==(n=Fl)))throw n;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Wa(e){var t=ja(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,a=t.memoizedState;if(null!==l){n.pending=null;var i=l=l.next;do{a=e(a,i.action),i=i.next}while(i!==l);Gn(a,t.memoizedState)||(_i=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function qa(e,t,n){var r=ya,l=ja(),a=ll;if(a){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Gn((ba||l).memoizedState,n);if(i&&(l.memoizedState=n,_i=!0),l=l.queue,go(2048,8,Ya.bind(null,r,l,e),[e]),l.getSnapshot!==t||i||null!==ka&&1&ka.memoizedState.tag){if(r.flags|=2048,po(9,{destroy:void 0,resource:void 0},Ga.bind(null,r,l,n,t),null),null===ns)throw Error(o(349));a||124&va||Qa(r,t,n)}return n}function Qa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ya.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ga(e,t,n,r){t.value=n,t.getSnapshot=r,Ka(t)&&Xa(e)}function Ya(e,t,n){return n(function(){Ka(t)&&Xa(e)})}function Ka(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Gn(e,n)}catch(e){return!0}}function Xa(e){var t=Lr(e,2);null!==t&&As(t,0,2)}function Ja(e){var t=Fa();if("function"==typeof e){var n=e;if(e=n(),xa){fe(!0);try{n()}finally{fe(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ba,lastRenderedState:e},t}function Za(e,t,n,r){return e.baseState=n,$a(e,ba,"function"==typeof r?r:Ba)}function eo(e,t,n,r,l){if(Ho(e))throw Error(o(485));if(null!==(e=t.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==R.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,to(t,a)):(a.next=n.next,t.pending=n.next=a)}}function to(e,t){var n=t.action,r=t.payload,l=e.state;if(t.isTransition){var a=R.T,o={};R.T=o;try{var i=n(l,r),u=R.S;null!==u&&u(o,i),no(e,t,i)}catch(n){lo(e,t,n)}finally{R.T=a}}else try{no(e,t,a=n(l,r))}catch(n){lo(e,t,n)}}function no(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then(function(n){ro(e,t,n)},function(n){return lo(e,t,n)}):ro(e,t,n)}function ro(e,t,n){t.status="fulfilled",t.value=n,ao(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,to(e,n)))}function lo(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,ao(t),t=t.next}while(t!==r)}e.action=null}function ao(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function oo(e,t){return t}function io(e,t){if(ll){var n=ns.formState;if(null!==n){e:{var r=ya;if(ll){if(rl){t:{for(var l=rl,a=ol;8!==l.nodeType;){if(!a){l=null;break t}if(null===(l=vf(l.nextSibling))){l=null;break t}}l="F!"===(a=l.data)||"F"===a?l:null}if(l){rl=vf(l.nextSibling),r="F!"===l.data;break e}}ul(r)}r=!1}r&&(t=n[0])}}return(n=Fa()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:oo,lastRenderedState:t},n.queue=r,n=jo.bind(null,ya,r),r.dispatch=n,r=Ja(!1),a=Uo.bind(null,ya,!1,r.queue),l={state:t,dispatch:null,action:e,pending:null},(r=Fa()).queue=l,n=eo.bind(null,ya,l,a,n),l.dispatch=n,r.memoizedState=e,[t,n,!1]}function uo(e){return so(ja(),ba,e)}function so(e,t,n){if(t=$a(e,t,oo)[0],e=Va(Ba)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Ia(t)}catch(e){if(e===$l)throw ql;throw e}else r=t;var l=(t=ja()).queue,a=l.dispatch;return n!==t.memoizedState&&(ya.flags|=2048,po(9,{destroy:void 0,resource:void 0},co.bind(null,l,n),null)),[r,a,e]}function co(e,t){e.action=t}function fo(e){var t=ja(),n=ba;if(null!==n)return so(t,n,e);ja(),t=t.memoizedState;var r=(n=ja()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function po(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=ya.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function mo(){return ja().memoizedState}function ho(e,t,n,r){var l=Fa();r=void 0===r?null:r,ya.flags|=e,l.memoizedState=po(1|t,{destroy:void 0,resource:void 0},n,r)}function go(e,t,n,r){var l=ja();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==ba&&null!==r&&za(r,ba.memoizedState.deps)?l.memoizedState=po(t,a,n,r):(ya.flags|=e,l.memoizedState=po(1|t,a,n,r))}function vo(e,t){ho(8390656,8,e,t)}function yo(e,t){go(2048,8,e,t)}function bo(e,t){return go(4,2,e,t)}function ko(e,t){return go(4,4,e,t)}function wo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function So(e,t,n){n=null!=n?n.concat([e]):null,go(4,4,wo.bind(null,t,e),n)}function xo(){}function Eo(e,t){var n=ja();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&za(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Co(e,t){var n=ja();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&za(t,r[1]))return r[0];if(r=e(),xa){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r}function _o(e,t,n){return void 0===n||1073741824&va?e.memoizedState=t:(e.memoizedState=n,e=Ms(),ya.lanes|=e,ds|=e,n)}function No(e,t,n,r){return Gn(n,t)?n:null!==da.current?(e=_o(e,n,r),Gn(e,t)||(_i=!0),e):42&va?(e=Ms(),ya.lanes|=e,ds|=e,t):(_i=!0,e.memoizedState=n)}function Po(e,t,n,r,l){var a=M.p;M.p=0!==a&&8>a?a:8;var o,i,u,s=R.T,c={};R.T=c,Uo(e,!1,t,n);try{var f=l(),d=R.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?Io(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then(function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)},function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)}),u),Rs()):Io(e,t,r,Rs())}catch(n){Io(e,t,{then:function(){},status:"rejected",reason:n},Rs())}finally{M.p=a,R.T=s}}function zo(){}function Lo(e,t,n,r){if(5!==e.tag)throw Error(o(476));var l=To(e).queue;Po(e,l,t,A,null===n?zo:function(){return Oo(e),n(r)})}function To(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:A,baseState:A,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ba,lastRenderedState:A},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ba,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Oo(e){Io(e,To(e).next.queue,{},Rs())}function Ro(){return Cl(Gf)}function Mo(){return ja().memoizedState}function Ao(){return ja().memoizedState}function Do(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Rs(),r=la(t,e=ra(n),n);return null!==r&&(As(r,0,n),aa(r,t,n)),t={cache:Ol()},void(e.payload=t)}t=t.return}}function Fo(e,t,n){var r=Rs();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Ho(e)?Bo(t,n):null!==(n=zr(e,t,n,r))&&(As(n,0,r),Vo(n,t,r))}function jo(e,t,n){Io(e,t,n,Rs())}function Io(e,t,n,r){var l={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ho(e))Bo(t,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=a(o,n);if(l.hasEagerState=!0,l.eagerState=i,Gn(i,o))return Pr(e,t,l,0),null===ns&&Nr(),!1}catch(e){}if(null!==(n=zr(e,t,l,r)))return As(n,0,r),Vo(n,t,r),!0}return!1}function Uo(e,t,n,r){if(r={lane:2,revertLane:Pc(),action:r,hasEagerState:!1,eagerState:null,next:null},Ho(e)){if(t)throw Error(o(479))}else null!==(t=zr(e,n,r,2))&&As(t,0,2)}function Ho(e){var t=e.alternate;return e===ya||null!==t&&t===ya}function Bo(e,t){Sa=wa=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Vo(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,_e(e,n)}}var $o={readContext:Cl,use:Ua,useCallback:Pa,useContext:Pa,useEffect:Pa,useImperativeHandle:Pa,useLayoutEffect:Pa,useInsertionEffect:Pa,useMemo:Pa,useReducer:Pa,useRef:Pa,useState:Pa,useDebugValue:Pa,useDeferredValue:Pa,useTransition:Pa,useSyncExternalStore:Pa,useId:Pa,useHostTransitionStatus:Pa,useFormState:Pa,useActionState:Pa,useOptimistic:Pa,useMemoCache:Pa,useCacheRefresh:Pa},Wo={readContext:Cl,use:Ua,useCallback:function(e,t){return Fa().memoizedState=[e,void 0===t?null:t],e},useContext:Cl,useEffect:vo,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,ho(4194308,4,wo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ho(4194308,4,e,t)},useInsertionEffect:function(e,t){ho(4,2,e,t)},useMemo:function(e,t){var n=Fa();t=void 0===t?null:t;var r=e();if(xa){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Fa();if(void 0!==n){var l=n(t);if(xa){fe(!0);try{n(t)}finally{fe(!1)}}}else l=t;return r.memoizedState=r.baseState=l,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},r.queue=e,e=e.dispatch=Fo.bind(null,ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Fa().memoizedState=e},useState:function(e){var t=(e=Ja(e)).queue,n=jo.bind(null,ya,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:xo,useDeferredValue:function(e,t){return _o(Fa(),e,t)},useTransition:function(){var e=Ja(!1);return e=Po.bind(null,ya,e.queue,!0,!1),Fa().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=ya,l=Fa();if(ll){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===ns)throw Error(o(349));124&ls||Qa(r,t,n)}l.memoizedState=n;var a={value:n,getSnapshot:t};return l.queue=a,vo(Ya.bind(null,r,a,e),[e]),r.flags|=2048,po(9,{destroy:void 0,resource:void 0},Ga.bind(null,r,a,n,t),null),n},useId:function(){var e=Fa(),t=ns.identifierPrefix;if(ll){var n=Xr;t="«"+t+"R"+(n=(Kr&~(1<<32-de(Kr)-1)).toString(32)+n),0<(n=Ea++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Na++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Ro,useFormState:io,useActionState:io,useOptimistic:function(e){var t=Fa();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Uo.bind(null,ya,!0,n),n.dispatch=t,[e,t]},useMemoCache:Ha,useCacheRefresh:function(){return Fa().memoizedState=Do.bind(null,ya)}},qo={readContext:Cl,use:Ua,useCallback:Eo,useContext:Cl,useEffect:yo,useImperativeHandle:So,useInsertionEffect:bo,useLayoutEffect:ko,useMemo:Co,useReducer:Va,useRef:mo,useState:function(){return Va(Ba)},useDebugValue:xo,useDeferredValue:function(e,t){return No(ja(),ba.memoizedState,e,t)},useTransition:function(){var e=Va(Ba)[0],t=ja().memoizedState;return["boolean"==typeof e?e:Ia(e),t]},useSyncExternalStore:qa,useId:Mo,useHostTransitionStatus:Ro,useFormState:uo,useActionState:uo,useOptimistic:function(e,t){return Za(ja(),0,e,t)},useMemoCache:Ha,useCacheRefresh:Ao},Qo={readContext:Cl,use:Ua,useCallback:Eo,useContext:Cl,useEffect:yo,useImperativeHandle:So,useInsertionEffect:bo,useLayoutEffect:ko,useMemo:Co,useReducer:Wa,useRef:mo,useState:function(){return Wa(Ba)},useDebugValue:xo,useDeferredValue:function(e,t){var n=ja();return null===ba?_o(n,e,t):No(n,ba.memoizedState,e,t)},useTransition:function(){var e=Wa(Ba)[0],t=ja().memoizedState;return["boolean"==typeof e?e:Ia(e),t]},useSyncExternalStore:qa,useId:Mo,useHostTransitionStatus:Ro,useFormState:fo,useActionState:fo,useOptimistic:function(e,t){var n=ja();return null!==ba?Za(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Ha,useCacheRefresh:Ao},Go=null,Yo=0;function Ko(e){var t=Yo;return Yo+=1,null===Go&&(Go=[]),Kl(Go,e,t)}function Xo(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Jo(e,t){if(t.$$typeof===d)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zo(e){return(0,e._init)(e._payload)}function ei(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function l(e,t){return(e=Fr(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Hr(n,e.mode,r)).return=e,t):((t=l(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===h?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===C&&Zo(a)===t.type)?(Xo(t=l(t,n.props),n),t.return=e,t):(Xo(t=Ir(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Br(n,e.mode,r)).return=e,t):((t=l(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Ur(n,e.mode,r,a)).return=e,t):((t=l(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Hr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case p:return Xo(n=Ir(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case m:return(t=Br(t,e.mode,n)).return=e,t;case C:return d(e,t=(0,t._init)(t._payload),n)}if(O(t)||z(t))return(t=Ur(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Ko(t),n);if(t.$$typeof===k)return d(e,_l(e,t),n);Jo(e,t)}return null}function g(e,t,n,r){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==l?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case p:return n.key===l?s(e,t,n,r):null;case m:return n.key===l?c(e,t,n,r):null;case C:return g(e,t,n=(l=n._init)(n._payload),r)}if(O(n)||z(n))return null!==l?null:f(e,t,n,r,null);if("function"==typeof n.then)return g(e,t,Ko(n),r);if(n.$$typeof===k)return g(e,t,_l(e,n),r);Jo(e,n)}return null}function v(e,t,n,r,l){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case p:return s(t,e=e.get(null===r.key?n:r.key)||null,r,l);case m:return c(t,e=e.get(null===r.key?n:r.key)||null,r,l);case C:return v(e,t,n,r=(0,r._init)(r._payload),l)}if(O(r)||z(r))return f(t,e=e.get(n)||null,r,l,null);if("function"==typeof r.then)return v(e,t,n,Ko(r),l);if(r.$$typeof===k)return v(e,t,n,_l(t,r),l);Jo(t,r)}return null}function y(u,s,c,f){if("object"==typeof c&&null!==c&&c.type===h&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case p:e:{for(var b=c.key;null!==s;){if(s.key===b){if((b=c.type)===h){if(7===s.tag){n(u,s.sibling),(f=l(s,c.props.children)).return=u,u=f;break e}}else if(s.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===C&&Zo(b)===s.type){n(u,s.sibling),Xo(f=l(s,c.props),c),f.return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}c.type===h?((f=Ur(c.props.children,u.mode,f,c.key)).return=u,u=f):(Xo(f=Ir(c.type,c.key,c.props,null,u.mode,f),c),f.return=u,u=f)}return i(u);case m:e:{for(b=c.key;null!==s;){if(s.key===b){if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){n(u,s.sibling),(f=l(s,c.children||[])).return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}(f=Br(c,u.mode,f)).return=u,u=f}return i(u);case C:return y(u,s,c=(b=c._init)(c._payload),f)}if(O(c))return function(l,o,i,u){for(var s=null,c=null,f=o,p=o=0,m=null;null!==f&&p<i.length;p++){f.index>p?(m=f,f=null):m=f.sibling;var h=g(l,f,i[p],u);if(null===h){null===f&&(f=m);break}e&&f&&null===h.alternate&&t(l,f),o=a(h,o,p),null===c?s=h:c.sibling=h,c=h,f=m}if(p===i.length)return n(l,f),ll&&Jr(l,p),s;if(null===f){for(;p<i.length;p++)null!==(f=d(l,i[p],u))&&(o=a(f,o,p),null===c?s=f:c.sibling=f,c=f);return ll&&Jr(l,p),s}for(f=r(f);p<i.length;p++)null!==(m=v(f,l,p,i[p],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?p:m.key),o=a(m,o,p),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach(function(e){return t(l,e)}),ll&&Jr(l,p),s}(u,s,c,f);if(z(c)){if("function"!=typeof(b=z(c)))throw Error(o(150));return function(l,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,p=i,m=i=0,h=null,y=u.next();null!==p&&!y.done;m++,y=u.next()){p.index>m?(h=p,p=null):h=p.sibling;var b=g(l,p,y.value,s);if(null===b){null===p&&(p=h);break}e&&p&&null===b.alternate&&t(l,p),i=a(b,i,m),null===f?c=b:f.sibling=b,f=b,p=h}if(y.done)return n(l,p),ll&&Jr(l,m),c;if(null===p){for(;!y.done;m++,y=u.next())null!==(y=d(l,y.value,s))&&(i=a(y,i,m),null===f?c=y:f.sibling=y,f=y);return ll&&Jr(l,m),c}for(p=r(p);!y.done;m++,y=u.next())null!==(y=v(p,l,m,y.value,s))&&(e&&null!==y.alternate&&p.delete(null===y.key?m:y.key),i=a(y,i,m),null===f?c=y:f.sibling=y,f=y);return e&&p.forEach(function(e){return t(l,e)}),ll&&Jr(l,m),c}(u,s,c=b.call(c),f)}if("function"==typeof c.then)return y(u,s,Ko(c),f);if(c.$$typeof===k)return y(u,s,_l(u,c),f);Jo(u,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==s&&6===s.tag?(n(u,s.sibling),(f=l(s,c)).return=u,u=f):(n(u,s),(f=Hr(c,u.mode,f)).return=u,u=f),i(u)):n(u,s)}return function(e,t,n,r){try{Yo=0;var l=y(e,t,n,r);return Go=null,l}catch(t){if(t===$l||t===ql)throw t;var a=Ar(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var ti=ei(!0),ni=ei(!1),ri=j(null),li=null;function ai(e){var t=e.alternate;U(si,1&si.current),U(ri,e),null===li&&(null===t||null!==da.current||null!==t.memoizedState)&&(li=e)}function oi(e){if(22===e.tag){if(U(si,si.current),U(ri,e),null===li){var t=e.alternate;null!==t&&null!==t.memoizedState&&(li=e)}}else ii()}function ii(){U(si,si.current),U(ri,ri.current)}function ui(e){I(ri),li===e&&(li=null),I(si)}var si=j(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||gf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function fi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:f({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var di={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Rs(),l=ra(r);l.payload=t,null!=n&&(l.callback=n),null!==(t=la(e,l,r))&&(As(t,0,r),aa(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Rs(),l=ra(r);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=la(e,l,r))&&(As(t,0,r),aa(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Rs(),r=ra(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=la(e,r,n))&&(As(t,0,n),aa(t,e,n))}};function pi(e,t,n,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&Yn(n,r)&&Yn(l,a))}function mi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&di.enqueueReplaceState(t,t.state,null)}function hi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var l in n===t&&(n=f({},n)),e)void 0===n[l]&&(n[l]=e[l]);return n}var gi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function vi(e){gi(e)}function yi(e){console.error(e)}function bi(e){gi(e)}function ki(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout(function(){throw e})}}function wi(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function Si(e,t,n){return(n=ra(n)).tag=3,n.payload={element:null},n.callback=function(){ki(e,t)},n}function xi(e){return(e=ra(e)).tag=3,e}function Ei(e,t,n,r){var l=n.type.getDerivedStateFromError;if("function"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){wi(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){wi(t,n,r),"function"!=typeof l&&(null===xs?xs=new Set([this]):xs.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ci=Error(o(461)),_i=!1;function Ni(e,t,n,r){t.child=null===e?ni(t,null,n,r):ti(t,e.child,n,r)}function Pi(e,t,n,r,l){n=n.render;var a=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return El(t),r=La(e,t,n,o,a,l),i=Ma(),null===e||_i?(ll&&i&&el(t),t.flags|=1,Ni(e,t,r,l),t.child):(Aa(e,t,l),Gi(e,t,l))}function zi(e,t,n,r,l){if(null===e){var a=n.type;return"function"!=typeof a||Dr(a)||void 0!==a.defaultProps||null!==n.compare?((e=Ir(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Li(e,t,a,r,l))}if(a=e.child,!Yi(e,l)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:Yn)(o,r)&&e.ref===t.ref)return Gi(e,t,l)}return t.flags|=1,(e=Fr(a,r)).ref=t.ref,e.return=t,t.child=e}function Li(e,t,n,r,l){if(null!==e){var a=e.memoizedProps;if(Yn(a,r)&&e.ref===t.ref){if(_i=!1,t.pendingProps=r=a,!Yi(e,l))return t.lanes=e.lanes,Gi(e,t,l);131072&e.flags&&(_i=!0)}}return Mi(e,t,n,r,l)}function Ti(e,t,n){var r=t.pendingProps,l=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(l=t.child=e.child,a=0;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Oi(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Oi(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Bl(0,null!==a?a.cachePool:null),null!==a?ma(t,a):ha(),oi(t)}else null!==a?(Bl(0,a.cachePool),ma(t,a),ii(),t.memoizedState=null):(null!==e&&Bl(0,null),ha(),ii());return Ni(e,t,l,n),t.child}function Oi(e,t,n,r){var l=Hl();return l=null===l?null:{parent:Tl._currentValue,pool:l},t.memoizedState={baseLanes:n,cachePool:l},null!==e&&Bl(0,null),ha(),oi(t),null!==e&&Sl(e,t,r,!0),null}function Ri(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Mi(e,t,n,r,l){return El(t),n=La(e,t,n,r,void 0,l),r=Ma(),null===e||_i?(ll&&r&&el(t),t.flags|=1,Ni(e,t,n,l),t.child):(Aa(e,t,l),Gi(e,t,l))}function Ai(e,t,n,r,l,a){return El(t),t.updateQueue=null,n=Oa(t,r,n,l),Ta(e),r=Ma(),null===e||_i?(ll&&r&&el(t),t.flags|=1,Ni(e,t,n,a),t.child):(Aa(e,t,a),Gi(e,t,a))}function Di(e,t,n,r,l){if(El(t),null===t.stateNode){var a=Rr,o=n.contextType;"object"==typeof o&&null!==o&&(a=Cl(o)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=di,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},ta(t),o=n.contextType,a.context="object"==typeof o&&null!==o?Cl(o):Rr,a.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(fi(t,n,o,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(o=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&di.enqueueReplaceState(a,a.state,null),sa(t,r,a,l),ua(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var i=t.memoizedProps,u=hi(n,i);a.props=u;var s=a.context,c=n.contextType;o=Rr,"object"==typeof c&&null!==c&&(o=Cl(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||s!==o)&&mi(t,a,r,o),ea=!1;var d=t.memoizedState;a.state=d,sa(t,r,a,l),ua(),s=t.memoizedState,i||d!==s||ea?("function"==typeof f&&(fi(t,n,f,r),s=t.memoizedState),(u=ea||pi(t,n,u,r,d,s,o))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=o,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,na(e,t),c=hi(n,o=t.memoizedProps),a.props=c,f=t.pendingProps,d=a.context,s=n.contextType,u=Rr,"object"==typeof s&&null!==s&&(u=Cl(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o!==f||d!==u)&&mi(t,a,r,u),ea=!1,d=t.memoizedState,a.state=d,sa(t,r,a,l),ua();var p=t.memoizedState;o!==f||d!==p||ea||null!==e&&null!==e.dependencies&&xl(e.dependencies)?("function"==typeof i&&(fi(t,n,i,r),p=t.memoizedState),(c=ea||pi(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&xl(e.dependencies))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Ri(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=ti(t,e.child,null,l),t.child=ti(t,null,n,l)):Ni(e,t,n,l),t.memoizedState=a.state,e=t.child):e=Gi(e,t,l),e}function Fi(e,t,n,r){return dl(),t.flags|=256,Ni(e,t,n,r),t.child}var ji={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Ii(e){return{baseLanes:e,cachePool:Vl()}}function Ui(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=hs),e}function Hi(e,t,n){var r,l=t.pendingProps,a=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&si.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(ll){if(a?ai(t):ii(),ll){var u,s=rl;if(u=s){e:{for(u=s,s=ol;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=vf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Yr?{id:Kr,overflow:Xr}:null,retryLane:536870912,hydrationErrors:null},(u=Ar(18,null,null,0)).stateNode=s,u.return=t,t.child=u,nl=t,rl=null,u=!0):u=!1}u||ul(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return gf(s)?t.lanes=32:t.lanes=536870912,null;ui(t)}return s=l.children,l=l.fallback,a?(ii(),s=Vi({mode:"hidden",children:s},a=t.mode),l=Ur(l,a,n,null),s.return=t,l.return=t,s.sibling=l,t.child=s,(a=t.child).memoizedState=Ii(n),a.childLanes=Ui(e,r,n),t.memoizedState=ji,l):(ai(t),Bi(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(ai(t),t.flags&=-257,t=$i(e,t,n)):null!==t.memoizedState?(ii(),t.child=e.child,t.flags|=128,t=null):(ii(),a=l.fallback,s=t.mode,l=Vi({mode:"visible",children:l.children},s),(a=Ur(a,s,n,null)).flags|=2,l.return=t,a.return=t,l.sibling=a,t.child=l,ti(t,e.child,null,n),(l=t.child).memoizedState=Ii(n),l.childLanes=Ui(e,r,n),t.memoizedState=ji,t=a);else if(ai(t),gf(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(o(419))).stack="",l.digest=r,ml({value:l,source:null,stack:null}),t=$i(e,t,n)}else if(_i||Sl(e,t,n,!1),r=0!==(n&e.childLanes),_i||r){if(null!==(r=ns)&&0!==(l=0!==((l=42&(l=n&-n)?1:Ne(l))&(r.suspendedLanes|n))?0:l)&&l!==u.retryLane)throw u.retryLane=l,Lr(e,l),As(r,0,l),Ci;"$?"===s.data||qs(),t=$i(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,rl=vf(s.nextSibling),nl=t,ll=!0,al=null,ol=!1,null!==e&&(Qr[Gr++]=Kr,Qr[Gr++]=Xr,Qr[Gr++]=Yr,Kr=e.id,Xr=e.overflow,Yr=t),(t=Bi(t,l.children)).flags|=4096);return t}return a?(ii(),a=l.fallback,s=t.mode,c=(u=e.child).sibling,(l=Fr(u,{mode:"hidden",children:l.children})).subtreeFlags=65011712&u.subtreeFlags,null!==c?a=Fr(c,a):(a=Ur(a,s,n,null)).flags|=2,a.return=t,l.return=t,l.sibling=a,t.child=l,l=a,a=t.child,null===(s=e.child.memoizedState)?s=Ii(n):(null!==(u=s.cachePool)?(c=Tl._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Vl(),s={baseLanes:s.baseLanes|n,cachePool:u}),a.memoizedState=s,a.childLanes=Ui(e,r,n),t.memoizedState=ji,l):(ai(t),e=(n=e.child).sibling,(n=Fr(n,{mode:"visible",children:l.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Bi(e,t){return(t=Vi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Vi(e,t){return(e=Ar(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function $i(e,t,n){return ti(t,e.child,null,n),(e=Bi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Wi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),kl(e.return,t,n)}function qi(e,t,n,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=l)}function Qi(e,t,n){var r=t.pendingProps,l=r.revealOrder,a=r.tail;if(Ni(e,t,r.children,n),2&(r=si.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wi(e,n,t);else if(19===e.tag)Wi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(U(si,r),l){case"forwards":for(n=t.child,l=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),qi(t,!1,l,n,a);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===ci(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}qi(t,!0,n,null,a);break;case"together":qi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Gi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ds|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(Sl(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Fr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yi(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!xl(e))}function Ki(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)_i=!0;else{if(!(Yi(e,n)||128&t.flags))return _i=!1,function(e,t,n){switch(t.tag){case 3:W(t,t.stateNode.containerInfo),yl(0,Tl,e.memoizedState.cache),dl();break;case 27:case 5:Q(t);break;case 4:W(t,t.stateNode.containerInfo);break;case 10:yl(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(ai(t),t.flags|=128,null):0!==(n&t.child.childLanes)?Hi(e,t,n):(ai(t),null!==(e=Gi(e,t,n))?e.sibling:null);ai(t);break;case 19:var l=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(Sl(e,t,n,!1),r=0!==(n&t.childLanes)),l){if(r)return Qi(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),U(si,si.current),r)break;return null;case 22:case 23:return t.lanes=0,Ti(e,t,n);case 24:yl(0,Tl,e.memoizedState.cache)}return Gi(e,t,n)}(e,t,n);_i=!!(131072&e.flags)}else _i=!1,ll&&1048576&t.flags&&Zr(t,qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,l=r._init;if(r=l(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((l=r.$$typeof)===w){t.tag=11,t=Pi(null,t,r,e,n);break e}if(l===E){t.tag=14,t=zi(null,t,r,e,n);break e}}throw t=T(r)||r,Error(o(306,t,""))}Dr(r)?(e=hi(r,e),t.tag=1,t=Di(null,t,r,e,n)):(t.tag=0,t=Mi(null,t,r,e,n))}return t;case 0:return Mi(e,t,t.type,t.pendingProps,n);case 1:return Di(e,t,r=t.type,l=hi(r,t.pendingProps),n);case 3:e:{if(W(t,t.stateNode.containerInfo),null===e)throw Error(o(387));r=t.pendingProps;var a=t.memoizedState;l=a.element,na(e,t),sa(t,r,null,n);var i=t.memoizedState;if(r=i.cache,yl(0,Tl,r),r!==a.cache&&wl(t,[Tl],n,!0),ua(),r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Fi(e,t,r,n);break e}if(r!==l){ml(l=xr(Error(o(424)),t)),t=Fi(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,rl=vf(e.firstChild),nl=t,ll=!0,al=null,ol=!0,n=ni(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(dl(),r===l){t=Gi(e,t,n);break e}Ni(e,t,r,n)}t=t.child}return t;case 26:return Ri(e,t),null===e?(n=Pf(t.type,null,t.pendingProps,null))?t.memoizedState=n:ll||(n=t.type,e=t.pendingProps,(r=nf(V.current).createElement(n))[Te]=t,r[Oe]=e,Zc(r,n,e),$e(r),t.stateNode=r):t.memoizedState=Pf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return Q(t),null===e&&ll&&(r=t.stateNode=kf(t.type,t.pendingProps,V.current),nl=t,ol=!0,l=rl,pf(t.type)?(yf=l,rl=vf(r.firstChild)):rl=l),Ni(e,t,t.pendingProps.children,n),Ri(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&ll&&((l=r=rl)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var l=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[je])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==l.rel||e.getAttribute("href")!==(null==l.href||""===l.href?null:l.href)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin)||e.getAttribute("title")!==(null==l.title?null:l.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==l.src?null:l.src)||e.getAttribute("type")!==(null==l.type?null:l.type)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==l.name?null:""+l.name;if("hidden"===l.type&&e.getAttribute("name")===a)return e}if(null===(e=vf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,ol))?(t.stateNode=r,nl=t,rl=vf(r.firstChild),ol=!1,l=!0):l=!1),l||ul(t)),Q(t),l=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,af(l,a)?r=null:null!==i&&af(l,i)&&(t.flags|=32),null!==t.memoizedState&&(l=La(e,t,Ra,null,null,n),Gf._currentValue=l),Ri(e,t),Ni(e,t,r,n),t.child;case 6:return null===e&&ll&&((e=n=rl)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=vf(e.nextSibling)))return null}return e}(n,t.pendingProps,ol))?(t.stateNode=n,nl=t,rl=null,e=!0):e=!1),e||ul(t)),null;case 13:return Hi(e,t,n);case 4:return W(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ti(t,null,r,n):Ni(e,t,r,n),t.child;case 11:return Pi(e,t,t.type,t.pendingProps,n);case 7:return Ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ni(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,yl(0,t.type,r.value),Ni(e,t,r.children,n),t.child;case 9:return l=t.type._context,r=t.pendingProps.children,El(t),r=r(l=Cl(l)),t.flags|=1,Ni(e,t,r,n),t.child;case 14:return zi(e,t,t.type,t.pendingProps,n);case 15:return Li(e,t,t.type,t.pendingProps,n);case 19:return Qi(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Vi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Fr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ti(e,t,n);case 24:return El(t),r=Cl(Tl),null===e?(null===(l=Hl())&&(l=ns,a=Ol(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=n),l=a),t.memoizedState={parent:r,cache:l},ta(t),yl(0,Tl,l)):(0!==(e.lanes&n)&&(na(e,t),sa(t,null,null,n),ua()),l=e.memoizedState,a=t.memoizedState,l.parent!==r?(l={parent:r,cache:r},t.memoizedState=l,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=l),yl(0,Tl,r)):(r=a.cache,yl(0,Tl,r),r!==l.cache&&wl(t,[Tl],n,!0))),Ni(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}function Xi(e){e.flags|=4}function Ji(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Hf(t)){if(null!==(t=ri.current)&&((4194048&ls)===ls?null!==li:(62914560&ls)!==ls&&!(536870912&ls)||t!==li))throw Xl=Ql,Wl;e.flags|=8192}}function Zi(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Se():536870912,e.lanes|=t,gs|=t)}function eu(e,t){if(!ll)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=65011712&l.subtreeFlags,r|=65011712&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function nu(e,t,n){var r=t.pendingProps;switch(tl(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return tu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bl(Tl),q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fl(t)?Xi(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,pl())),tu(t),null;case 26:return n=t.memoizedState,null===e?(Xi(t),null!==n?(tu(t),Ji(t,n)):(tu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Xi(t),tu(t),Ji(t,n)):(tu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Xi(t),tu(t),t.flags&=-16777217),null;case 27:G(t),n=V.current;var l=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Xi(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return tu(t),null}e=H.current,fl(t)?sl(t):(e=kf(l,r,n),t.stateNode=e,Xi(t))}return tu(t),null;case 5:if(G(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Xi(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return tu(t),null}if(e=H.current,fl(t))sl(t);else{switch(l=nf(V.current),e){case 1:e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?l.createElement("select",{is:r.is}):l.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?l.createElement(n,{is:r.is}):l.createElement(n)}}e[Te]=t,e[Oe]=r;e:for(l=t.child;null!==l;){if(5===l.tag||6===l.tag)e.appendChild(l.stateNode);else if(4!==l.tag&&27!==l.tag&&null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)break e;for(;null===l.sibling;){if(null===l.return||l.return===t)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}t.stateNode=e;e:switch(Zc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Xi(t)}}return tu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Xi(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=V.current,fl(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(l=nl))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[Te]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Yc(e.nodeValue,n)))||ul(t)}else(e=nf(e).createTextNode(r))[Te]=t,t.stateNode=e}return tu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=fl(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[Te]=t}else dl(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;tu(t),l=!1}else l=pl(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=l),l=!0;if(!l)return 256&t.flags?(ui(t),t):(ui(t),null)}if(ui(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){l=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Zi(t,t.updateQueue),tu(t),null;case 4:return q(),null===e&&Ic(t.stateNode.containerInfo),tu(t),null;case 10:return bl(t.type),tu(t),null;case 19:if(I(si),null===(l=t.memoizedState))return tu(t),null;if(r=!!(128&t.flags),null===(a=l.rendering))if(r)eu(l,!1);else{if(0!==fs||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=ci(e))){for(t.flags|=128,eu(l,!1),e=a.updateQueue,t.updateQueue=e,Zi(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)jr(n,e),n=n.sibling;return U(si,1&si.current|2),t.child}e=e.sibling}null!==l.tail&&ee()>ws&&(t.flags|=128,r=!0,eu(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Zi(t,e),eu(l,!0),null===l.tail&&"hidden"===l.tailMode&&!a.alternate&&!ll)return tu(t),null}else 2*ee()-l.renderingStartTime>ws&&536870912!==n&&(t.flags|=128,r=!0,eu(l,!1),t.lanes=4194304);l.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=l.last)?e.sibling=a:t.child=a,l.last=a)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=ee(),t.sibling=null,e=si.current,U(si,r?1&e|2:1&e),t):(tu(t),null);case 22:case 23:return ui(t),ga(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(tu(t),6&t.subtreeFlags&&(t.flags|=8192)):tu(t),null!==(n=t.updateQueue)&&Zi(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&I(Ul),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bl(Tl),tu(t),null;case 25:case 30:return null}throw Error(o(156,t.tag))}function ru(e,t){switch(tl(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bl(Tl),q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return G(t),null;case 13:if(ui(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));dl()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return I(si),null;case 4:return q(),null;case 10:return bl(t.type),null;case 22:case 23:return ui(t),ga(),null!==e&&I(Ul),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bl(Tl),null;default:return null}}function lu(e,t){switch(tl(t),t.tag){case 3:bl(Tl),q();break;case 26:case 27:case 5:G(t);break;case 4:q();break;case 13:ui(t);break;case 19:I(si);break;case 10:bl(t.type);break;case 22:case 23:ui(t),ga(),null!==e&&I(Ul);break;case 24:bl(Tl)}}function au(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var l=r.next;n=l;do{if((n.tag&e)===e){r=void 0;var a=n.create,o=n.inst;r=a(),o.destroy=r}n=n.next}while(n!==l)}}catch(e){sc(t,t.return,e)}}function ou(e,t,n){try{var r=t.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,l=t;var u=n,s=i;try{s()}catch(e){sc(l,u,e)}}}r=r.next}while(r!==a)}}catch(e){sc(t,t.return,e)}}function iu(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{fa(t,n)}catch(t){sc(e,e.return,t)}}}function uu(e,t,n){n.props=hi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){sc(e,t,n)}}function su(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){sc(e,t,n)}}function cu(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){sc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){sc(e,t,n)}else n.current=null}function fu(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){sc(e,e.return,t)}}function du(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var l=null,a=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Xc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":a=m;break;case"name":l=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(o(137,t));break;default:m!==d&&Xc(e,t,p,m,r,d)}}return void ht(e,i,u,s,c,f,a,l);case"select":for(a in m=i=u=p=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(a)||Xc(e,t,a,null,r,s)}for(l in r)if(a=r[l],s=n[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case"value":p=a;break;case"defaultValue":u=a;break;case"multiple":i=a;default:a!==s&&Xc(e,t,l,a,r,s)}return t=u,n=i,r=m,void(null!=p?yt(e,!!n,p,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(l=n[u],n.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Xc(e,t,u,null,r,l)}for(i in r)if(l=r[i],a=n[i],r.hasOwnProperty(i)&&(null!=l||null!=a))switch(i){case"value":p=l;break;case"defaultValue":m=l;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(o(91));break;default:l!==a&&Xc(e,t,i,l,r,a)}return void bt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Xc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Xc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Xc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Xc(e,t,c,p,r,m)}return;default:if(Ct(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&Jc(e,t,v,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Jc(e,t,f,p,r,m);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Xc(e,t,y,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Xc(e,t,d,p,r,m)}(r,e.type,n,t),r[Oe]=t}catch(t){sc(e,e.return,t)}}function pu(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&pf(e.type)||4===e.tag}function mu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||pu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&pf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function hu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Kc));else if(4!==r&&(27===r&&pf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(hu(e,t,n),e=e.sibling;null!==e;)hu(e,t,n),e=e.sibling}function gu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&pf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function vu(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,l=t.attributes;l.length;)t.removeAttributeNode(l[0]);Zc(t,r,n),t[Te]=e,t[Oe]=n}catch(t){sc(e,e.return,t)}}var yu=!1,bu=!1,ku=!1,wu="function"==typeof WeakSet?WeakSet:Set,Su=null;function xu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Du(e,n),4&r&&au(5,n);break;case 1:if(Du(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){sc(n,n.return,e)}else{var l=hi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(l,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){sc(n,n.return,e)}}64&r&&iu(n),512&r&&su(n,n.return);break;case 3:if(Du(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{fa(e,t)}catch(e){sc(n,n.return,e)}}break;case 27:null===t&&4&r&&vu(n);case 26:case 5:Du(e,n),null===t&&4&r&&fu(n),512&r&&su(n,n.return);break;case 12:Du(e,n);break;case 13:Du(e,n),4&r&&zu(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=pc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||yu)){t=null!==t&&null!==t.memoizedState||bu,l=yu;var a=bu;yu=r,(bu=t)&&!a?ju(e,n,!!(8772&n.subtreeFlags)):Du(e,n),yu=l,bu=a}break;case 30:break;default:Du(e,n)}}function Eu(e){var t=e.alternate;null!==t&&(e.alternate=null,Eu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ie(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Cu=null,_u=!1;function Nu(e,t,n){for(n=n.child;null!==n;)Pu(e,t,n),n=n.sibling}function Pu(e,t,n){if(ce&&"function"==typeof ce.onCommitFiberUnmount)try{ce.onCommitFiberUnmount(se,n)}catch(e){}switch(n.tag){case 26:bu||cu(n,t),Nu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:bu||cu(n,t);var r=Cu,l=_u;pf(n.type)&&(Cu=n.stateNode,_u=!1),Nu(e,t,n),wf(n.stateNode),Cu=r,_u=l;break;case 5:bu||cu(n,t);case 6:if(r=Cu,l=_u,Cu=null,Nu(e,t,n),_u=l,null!==(Cu=r))if(_u)try{(9===Cu.nodeType?Cu.body:"HTML"===Cu.nodeName?Cu.ownerDocument.body:Cu).removeChild(n.stateNode)}catch(e){sc(n,t,e)}else try{Cu.removeChild(n.stateNode)}catch(e){sc(n,t,e)}break;case 18:null!==Cu&&(_u?(mf(9===(e=Cu).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Cd(e)):mf(Cu,n.stateNode));break;case 4:r=Cu,l=_u,Cu=n.stateNode.containerInfo,_u=!0,Nu(e,t,n),Cu=r,_u=l;break;case 0:case 11:case 14:case 15:bu||ou(2,n,t),bu||ou(4,n,t),Nu(e,t,n);break;case 1:bu||(cu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&uu(n,t,r)),Nu(e,t,n);break;case 21:Nu(e,t,n);break;case 22:bu=(r=bu)||null!==n.memoizedState,Nu(e,t,n),bu=r;break;default:Nu(e,t,n)}}function zu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Cd(e)}catch(e){sc(t,t.return,e)}}function Lu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new wu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new wu),t;default:throw Error(o(435,e.tag))}}(e);t.forEach(function(t){var r=mc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}function Tu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var l=n[r],a=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:if(pf(u.type)){Cu=u.stateNode,_u=!1;break e}break;case 5:Cu=u.stateNode,_u=!1;break e;case 3:case 4:Cu=u.stateNode.containerInfo,_u=!0;break e}u=u.return}if(null===Cu)throw Error(o(160));Pu(a,i,l),Cu=null,_u=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ru(t,e),t=t.sibling}var Ou=null;function Ru(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Tu(t,e),Mu(e),4&r&&(ou(3,e,e.return),au(3,e),ou(5,e,e.return));break;case 1:Tu(t,e),Mu(e),512&r&&(bu||null===n||cu(n,n.return)),64&r&&yu&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var l=Ou;if(Tu(t,e),Mu(e),512&r&&(bu||null===n||cu(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,l=l.ownerDocument||l;t:switch(r){case"title":(!(a=l.getElementsByTagName("title")[0])||a[je]||a[Te]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector("head > title"))),Zc(a,r,n),a[Te]=e,$e(a),r=a;break e;case"link":var i=If("link","href",l).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((a=i[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Zc(a=l.createElement(r),r,n),l.head.appendChild(a);break;case"meta":if(i=If("meta","content",l).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((a=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Zc(a=l.createElement(r),r,n),l.head.appendChild(a);break;default:throw Error(o(468,r))}a[Te]=e,$e(a),r=a}e.stateNode=r}else Uf(l,e.type,e.stateNode);else e.stateNode=Mf(l,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Uf(l,e.type,e.stateNode):Mf(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&du(e,e.memoizedProps,n.memoizedProps)}break;case 27:Tu(t,e),Mu(e),512&r&&(bu||null===n||cu(n,n.return)),null!==n&&4&r&&du(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Tu(t,e),Mu(e),512&r&&(bu||null===n||cu(n,n.return)),32&e.flags){l=e.stateNode;try{wt(l,"")}catch(t){sc(e,e.return,t)}}4&r&&null!=e.stateNode&&du(e,l=e.memoizedProps,null!==n?n.memoizedProps:l),1024&r&&(ku=!0);break;case 6:if(Tu(t,e),Mu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){sc(e,e.return,t)}}break;case 3:if(jf=null,l=Ou,Ou=Ef(t.containerInfo),Tu(t,e),Ou=l,Mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Cd(t.containerInfo)}catch(t){sc(e,e.return,t)}ku&&(ku=!1,Au(e));break;case 4:r=Ou,Ou=Ef(e.stateNode.containerInfo),Tu(t,e),Mu(e),Ou=r;break;case 12:default:Tu(t,e),Mu(e);break;case 13:Tu(t,e),Mu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(ks=ee()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lu(e,r));break;case 22:l=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=yu,f=bu;if(yu=c||l,bu=f||s,Tu(t,e),bu=f,yu=c,Mu(e),8192&r)e:for(t=e.stateNode,t._visibility=l?-2&t._visibility:1|t._visibility,l&&(null===n||s||yu||bu||Fu(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(a=s.stateNode,l)"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){sc(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=l?"":s.memoizedProps}catch(e){sc(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Lu(e,n));break;case 19:Tu(t,e),Mu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lu(e,r));case 30:case 21:}}function Mu(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(pu(r)){n=r;break}r=r.return}if(null==n)throw Error(o(160));switch(n.tag){case 27:var l=n.stateNode;gu(e,mu(e),l);break;case 5:var a=n.stateNode;32&n.flags&&(wt(a,""),n.flags&=-33),gu(e,mu(e),a);break;case 3:case 4:var i=n.stateNode.containerInfo;hu(e,mu(e),i);break;default:throw Error(o(161))}}catch(t){sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Au(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Au(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Du(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)xu(e,t.alternate,t),t=t.sibling}function Fu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ou(4,t,t.return),Fu(t);break;case 1:cu(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&uu(t,t.return,n),Fu(t);break;case 27:wf(t.stateNode);case 26:case 5:cu(t,t.return),Fu(t);break;case 22:null===t.memoizedState&&Fu(t);break;default:Fu(t)}e=e.sibling}}function ju(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,l=e,a=t,o=a.flags;switch(a.tag){case 0:case 11:case 15:ju(l,a,n),au(4,a);break;case 1:if(ju(l,a,n),"function"==typeof(l=(r=a).stateNode).componentDidMount)try{l.componentDidMount()}catch(e){sc(r,r.return,e)}if(null!==(l=(r=a).updateQueue)){var i=r.stateNode;try{var u=l.shared.hiddenCallbacks;if(null!==u)for(l.shared.hiddenCallbacks=null,l=0;l<u.length;l++)ca(u[l],i)}catch(e){sc(r,r.return,e)}}n&&64&o&&iu(a),su(a,a.return);break;case 27:vu(a);case 26:case 5:ju(l,a,n),n&&null===r&&4&o&&fu(a),su(a,a.return);break;case 12:ju(l,a,n);break;case 13:ju(l,a,n),n&&4&o&&zu(l,a);break;case 22:null===a.memoizedState&&ju(l,a,n),su(a,a.return);break;case 30:break;default:ju(l,a,n)}t=t.sibling}}function Iu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Rl(n))}function Uu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Rl(e))}function Hu(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Bu(e,t,n,r),t=t.sibling}function Bu(e,t,n,r){var l=t.flags;switch(t.tag){case 0:case 11:case 15:Hu(e,t,n,r),2048&l&&au(9,t);break;case 1:case 13:default:Hu(e,t,n,r);break;case 3:Hu(e,t,n,r),2048&l&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Rl(e)));break;case 12:if(2048&l){Hu(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,o=a.id,i=a.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){sc(t,t.return,e)}}else Hu(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,o=t.alternate,null!==t.memoizedState?2&a._visibility?Hu(e,t,n,r):$u(e,t):2&a._visibility?Hu(e,t,n,r):(a._visibility|=2,Vu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&l&&Iu(o,t);break;case 24:Hu(e,t,n,r),2048&l&&Uu(t.alternate,t)}}function Vu(e,t,n,r,l){for(l=l&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,o=t,i=n,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Vu(a,o,i,u,l),au(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?2&c._visibility?Vu(a,o,i,u,l):$u(a,o):(c._visibility|=2,Vu(a,o,i,u,l)),l&&2048&s&&Iu(o.alternate,o);break;case 24:Vu(a,o,i,u,l),l&&2048&s&&Uu(o.alternate,o);break;default:Vu(a,o,i,u,l)}t=t.sibling}}function $u(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,l=r.flags;switch(r.tag){case 22:$u(n,r),2048&l&&Iu(r.alternate,r);break;case 24:$u(n,r),2048&l&&Uu(r.alternate,r);break;default:$u(n,r)}t=t.sibling}}var Wu=8192;function qu(e){if(e.subtreeFlags&Wu)for(e=e.child;null!==e;)Qu(e),e=e.sibling}function Qu(e){switch(e.tag){case 26:qu(e),e.flags&Wu&&null!==e.memoizedState&&function(e,t,n){if(null===Bf)throw Error(o(475));var r=Bf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var l=zf(n.href),a=e.querySelector(Lf(l));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=$f.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void $e(a);a=e.ownerDocument||e,n=Tf(n),(l=Sf.get(l))&&Df(n,l),$e(a=a.createElement("link"));var i=a;i._p=new Promise(function(e,t){i.onload=e,i.onerror=t}),Zc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=$f.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Ou,e.memoizedState,e.memoizedProps);break;case 5:default:qu(e);break;case 3:case 4:var t=Ou;Ou=Ef(e.stateNode.containerInfo),qu(e),Ou=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Wu,Wu=16777216,qu(e),Wu=t):qu(e))}}function Gu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Yu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Su=r,Ju(r,e)}Gu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ku(e),e=e.sibling}function Ku(e){switch(e.tag){case 0:case 11:case 15:Yu(e),2048&e.flags&&ou(9,e,e.return);break;case 3:case 12:default:Yu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Xu(e)):Yu(e)}}function Xu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Su=r,Ju(r,e)}Gu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ou(8,t,t.return),Xu(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Xu(t));break;default:Xu(t)}e=e.sibling}}function Ju(e,t){for(;null!==Su;){var n=Su;switch(n.tag){case 0:case 11:case 15:ou(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Rl(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,Su=r;else e:for(n=e;null!==Su;){var l=(r=Su).sibling,a=r.return;if(Eu(r),r===n){Su=null;break e}if(null!==l){l.return=a,Su=l;break e}Su=a}}}var Zu={getCacheForType:function(e){var t=Cl(Tl),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},es="function"==typeof WeakMap?WeakMap:Map,ts=0,ns=null,rs=null,ls=0,as=0,os=null,is=!1,us=!1,ss=!1,cs=0,fs=0,ds=0,ps=0,ms=0,hs=0,gs=0,vs=null,ys=null,bs=!1,ks=0,ws=1/0,Ss=null,xs=null,Es=0,Cs=null,_s=null,Ns=0,Ps=0,zs=null,Ls=null,Ts=0,Os=null;function Rs(){return 2&ts&&0!==ls?ls&-ls:null!==R.T?0!==Dl?Dl:Pc():ze()}function Ms(){0===hs&&(hs=536870912&ls&&!ll?536870912:we());var e=ri.current;return null!==e&&(e.flags|=32),hs}function As(e,t,n){(e!==ns||2!==as&&9!==as)&&null===e.cancelPendingCommit||(Bs(e,0),Is(e,ls,hs,!1)),Ee(e,n),2&ts&&e===ns||(e===ns&&(!(2&ts)&&(ps|=n),4===fs&&Is(e,ls,hs,!1)),wc(e))}function Ds(e,t,n){if(6&ts)throw Error(o(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||be(e,t),l=r?function(e,t){var n=ts;ts|=2;var r=$s(),l=Ws();ns!==e||ls!==t?(Ss=null,ws=ee()+500,Bs(e,t)):us=be(e,t);e:for(;;)try{if(0!==as&&null!==rs){t=rs;var a=os;t:switch(as){case 1:as=0,os=null,Js(e,t,a,1);break;case 2:case 9:if(Gl(a)){as=0,os=null,Xs(t);break}t=function(){2!==as&&9!==as||ns!==e||(as=7),wc(e)},a.then(t,t);break e;case 3:as=7;break e;case 4:as=5;break e;case 7:Gl(a)?(as=0,os=null,Xs(t)):(as=0,os=null,Js(e,t,a,7));break;case 5:var i=null;switch(rs.tag){case 26:i=rs.memoizedState;case 5:case 27:var u=rs;if(!i||Hf(i)){as=0,os=null;var s=u.sibling;if(null!==s)rs=s;else{var c=u.return;null!==c?(rs=c,Zs(c)):rs=null}break t}}as=0,os=null,Js(e,t,a,5);break;case 6:as=0,os=null,Js(e,t,a,6);break;case 8:Hs(),fs=6;break e;default:throw Error(o(462))}}Ys();break}catch(t){Vs(e,t)}return vl=gl=null,R.H=r,R.A=l,ts=n,null!==rs?0:(ns=null,ls=0,Nr(),fs)}(e,t):Qs(e,t,!0),a=r;;){if(0===l){us&&!r&&Is(e,t,0,!1);break}if(n=e.current.alternate,!a||js(n)){if(2===l){if(a=t,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;l=vs;var s=u.current.memoizedState.isDehydrated;if(s&&(Bs(u,i).flags|=256),2!==(i=Qs(u,i,!1))){if(ss&&!s){u.errorRecoveryDisabledLanes|=a,ps|=a,l=4;break e}a=ys,ys=l,null!==a&&(null===ys?ys=a:ys.push.apply(ys,a))}l=i}if(a=!1,2!==l)continue}}if(1===l){Bs(e,0),Is(e,t,0,!0);break}e:{switch(r=e,a=l){case 0:case 1:throw Error(o(345));case 4:if((4194048&t)!==t)break;case 6:Is(r,t,hs,!is);break e;case 2:ys=null;break;case 3:case 5:break;default:throw Error(o(329))}if((62914560&t)===t&&10<(l=ks+300-ee())){if(Is(r,t,hs,!is),0!==ye(r,0,!0))break e;r.timeoutHandle=uf(Fs.bind(null,r,n,ys,Ss,bs,t,hs,ps,gs,is,a,2,-0,0),l)}else Fs(r,n,ys,Ss,bs,t,hs,ps,gs,is,a,0,-0,0)}break}l=Qs(e,t,!1),a=!1}wc(e)}function Fs(e,t,n,r,l,a,i,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(Bf={stylesheets:null,count:0,unsuspend:Vf},Qu(t),null!==(d=function(){if(null===Bf)throw Error(o(475));var e=Bf;return e.stylesheets&&0===e.count&&qf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout(function(){if(e.stylesheets&&qf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}},6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(tc.bind(null,e,t,a,n,r,l,i,u,s,f,1,p,m)),void Is(e,a,i,!c);tc(e,t,a,n,r,l,i,u,s)}function js(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var l=n[r],a=l.getSnapshot;l=l.value;try{if(!Gn(a(),l))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Is(e,t,n,r){t&=~ms,t&=~ps,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var l=t;0<l;){var a=31-de(l),o=1<<a;r[a]=-1,l&=~o}0!==n&&Ce(e,n,t)}function Us(){return!!(6&ts)||(Sc(0,!1),!1)}function Hs(){if(null!==rs){if(0===as)var e=rs.return;else vl=gl=null,Da(e=rs),Go=null,Yo=0,e=rs;for(;null!==e;)lu(e.alternate,e),e=e.return;rs=null}}function Bs(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,sf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Hs(),ns=e,rs=n=Fr(e.current,null),ls=t,as=0,os=null,is=!1,us=be(e,t),ss=!1,gs=hs=ms=ps=ds=fs=0,ys=vs=null,bs=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var l=31-de(r),a=1<<l;t|=e[l],r&=~a}return cs=t,Nr(),n}function Vs(e,t){ya=null,R.H=$o,t===$l||t===ql?(t=Jl(),as=3):t===Wl?(t=Jl(),as=4):as=t===Ci?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,os=t,null===rs&&(fs=1,ki(e,xr(t,e.current)))}function $s(){var e=R.H;return R.H=$o,null===e?$o:e}function Ws(){var e=R.A;return R.A=Zu,e}function qs(){fs=4,is||(4194048&ls)!==ls&&null!==ri.current||(us=!0),!(134217727&ds)&&!(134217727&ps)||null===ns||Is(ns,ls,hs,!1)}function Qs(e,t,n){var r=ts;ts|=2;var l=$s(),a=Ws();ns===e&&ls===t||(Ss=null,Bs(e,t)),t=!1;var o=fs;e:for(;;)try{if(0!==as&&null!==rs){var i=rs,u=os;switch(as){case 8:Hs(),o=6;break e;case 3:case 2:case 9:case 6:null===ri.current&&(t=!0);var s=as;if(as=0,os=null,Js(e,i,u,s),n&&us){o=0;break e}break;default:s=as,as=0,os=null,Js(e,i,u,s)}}Gs(),o=fs;break}catch(t){Vs(e,t)}return t&&e.shellSuspendCounter++,vl=gl=null,ts=r,R.H=l,R.A=a,null===rs&&(ns=null,ls=0,Nr()),o}function Gs(){for(;null!==rs;)Ks(rs)}function Ys(){for(;null!==rs&&!J();)Ks(rs)}function Ks(e){var t=Ki(e.alternate,e,cs);e.memoizedProps=e.pendingProps,null===t?Zs(e):rs=t}function Xs(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Ai(n,t,t.pendingProps,t.type,void 0,ls);break;case 11:t=Ai(n,t,t.pendingProps,t.type.render,t.ref,ls);break;case 5:Da(t);default:lu(n,t),t=Ki(n,t=rs=jr(t,cs),cs)}e.memoizedProps=e.pendingProps,null===t?Zs(e):rs=t}function Js(e,t,n,r){vl=gl=null,Da(t),Go=null,Yo=0;var l=t.return;try{if(function(e,t,n,r,l){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Sl(t,n,l,!0),null!==(n=ri.current)){switch(n.tag){case 13:return null===li?qs():null===n.alternate&&0===fs&&(fs=3),n.flags&=-257,n.flags|=65536,n.lanes=l,r===Ql?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),cc(e,r,l)),!1;case 22:return n.flags|=65536,r===Ql?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),cc(e,r,l)),!1}throw Error(o(435,n.tag))}return cc(e,r,l),qs(),!1}if(ll)return null!==(t=ri.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=l,r!==il&&ml(xr(e=Error(o(422),{cause:r}),n))):(r!==il&&ml(xr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,l&=-l,e.lanes|=l,r=xr(r,n),oa(e,l=Si(e.stateNode,r,l)),4!==fs&&(fs=2)),!1;var a=Error(o(520),{cause:r});if(a=xr(a,n),null===vs?vs=[a]:vs.push(a),4!==fs&&(fs=2),null===t)return!0;r=xr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=l&-l,n.lanes|=e,oa(n,e=Si(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==xs&&xs.has(a))))return n.flags|=65536,l&=-l,n.lanes|=l,Ei(l=xi(l),e,n,r),oa(n,l),!1}n=n.return}while(null!==n);return!1}(e,l,t,n,ls))return fs=1,ki(e,xr(n,e.current)),void(rs=null)}catch(t){if(null!==l)throw rs=l,t;return fs=1,ki(e,xr(n,e.current)),void(rs=null)}32768&t.flags?(ll||1===r?e=!0:us||536870912&ls?e=!1:(is=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ri.current)&&13===r.tag&&(r.flags|=16384)),ec(t,e)):Zs(t)}function Zs(e){var t=e;do{if(32768&t.flags)return void ec(t,is);e=t.return;var n=nu(t.alternate,t,cs);if(null!==n)return void(rs=n);if(null!==(t=t.sibling))return void(rs=t);rs=t=e}while(null!==t);0===fs&&(fs=5)}function ec(e,t){do{var n=ru(e.alternate,e);if(null!==n)return n.flags&=32767,void(rs=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(rs=e);rs=e=n}while(null!==e);fs=6,rs=null}function tc(e,t,n,r,l,a,i,u,s){e.cancelPendingCommit=null;do{oc()}while(0!==Es);if(6&ts)throw Error(o(327));if(null!==t){if(t===e.current)throw Error(o(177));if(a=t.lanes|t.childLanes,function(e,t,n,r,l,a){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-de(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Ce(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~t))}(e,n,a|=_r,i,u,s),e===ns&&(rs=ns=null,ls=0),_s=t,Cs=e,Ns=n,Ps=a,zs=l,Ls=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,K(le,function(){return ic(),null})):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=R.T,R.T=null,l=M.p,M.p=2,i=ts,ts|=4;try{!function(e,t){if(e=e.containerInfo,ef=ed,er(e=Zn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var l=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==l&&3!==d.nodeType||(u=i+l),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===l&&(u=i),p===a&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(tf={focusedElem:e,selectionRange:n},ed=!1,Su=t;null!==Su;)if(e=(t=Su).child,1024&t.subtreeFlags&&null!==e)e.return=t,Su=e;else for(;null!==Su;){switch(a=(t=Su).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,l=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var h=hi(n.type,l,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){sc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))hf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":hf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,Su=e;break}Su=t.return}}(e,t)}finally{ts=i,M.p=l,R.T=r}}Es=1,nc(),rc(),lc()}}function nc(){if(1===Es){Es=0;var e=Cs,t=_s,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=R.T,R.T=null;var r=M.p;M.p=2;var l=ts;ts|=4;try{Ru(t,e);var a=tf,o=Zn(e.containerInfo),i=a.focusedElem,u=a.selectionRange;if(o!==i&&i&&i.ownerDocument&&Jn(i.ownerDocument.documentElement,i)){if(null!==u&&er(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(o=g,g=h,h=o);var v=Xn(i,h),y=Xn(i,g);if(v&&y&&(1!==p.rangeCount||p.anchorNode!==v.node||p.anchorOffset!==v.offset||p.focusNode!==y.node||p.focusOffset!==y.offset)){var b=f.createRange();b.setStart(v.node,v.offset),p.removeAllRanges(),h>g?(p.addRange(b),p.extend(y.node,y.offset)):(b.setEnd(y.node,y.offset),p.addRange(b))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var k=f[i];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}ed=!!ef,tf=ef=null}finally{ts=l,M.p=r,R.T=n}}e.current=t,Es=2}}function rc(){if(2===Es){Es=0;var e=Cs,t=_s,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=R.T,R.T=null;var r=M.p;M.p=2;var l=ts;ts|=4;try{xu(e,t.alternate,t)}finally{ts=l,M.p=r,R.T=n}}Es=3}}function lc(){if(4===Es||3===Es){Es=0,Z();var e=Cs,t=_s,n=Ns,r=Ls;10256&t.subtreeFlags||10256&t.flags?Es=5:(Es=0,_s=Cs=null,ac(e,e.pendingLanes));var l=e.pendingLanes;if(0===l&&(xs=null),Pe(n),t=t.stateNode,ce&&"function"==typeof ce.onCommitFiberRoot)try{ce.onCommitFiberRoot(se,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=R.T,l=M.p,M.p=2,R.T=null;try{for(var a=e.onRecoverableError,o=0;o<r.length;o++){var i=r[o];a(i.value,{componentStack:i.stack})}}finally{R.T=t,M.p=l}}3&Ns&&oc(),wc(e),l=e.pendingLanes,4194090&n&&42&l?e===Os?Ts++:(Ts=0,Os=e):Ts=0,Sc(0,!1)}}function ac(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Rl(t))}function oc(e){return nc(),rc(),lc(),ic()}function ic(){if(5!==Es)return!1;var e=Cs,t=Ps;Ps=0;var n=Pe(Ns),r=R.T,l=M.p;try{M.p=32>n?32:n,R.T=null,n=zs,zs=null;var a=Cs,i=Ns;if(Es=0,_s=Cs=null,Ns=0,6&ts)throw Error(o(331));var u=ts;if(ts|=4,Ku(a.current),Bu(a,a.current,i,n),ts=u,Sc(0,!1),ce&&"function"==typeof ce.onPostCommitFiberRoot)try{ce.onPostCommitFiberRoot(se,a)}catch(e){}return!0}finally{M.p=l,R.T=r,ac(e,t)}}function uc(e,t,n){t=xr(n,t),null!==(e=la(e,t=Si(e.stateNode,t,2),2))&&(Ee(e,2),wc(e))}function sc(e,t,n){if(3===e.tag)uc(e,e,n);else for(;null!==t;){if(3===t.tag){uc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===xs||!xs.has(r))){e=xr(n,e),null!==(r=la(t,n=xi(2),2))&&(Ei(n,r,t,e),Ee(r,2),wc(r));break}}t=t.return}}function cc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new es;var l=new Set;r.set(t,l)}else void 0===(l=r.get(t))&&(l=new Set,r.set(t,l));l.has(n)||(ss=!0,l.add(n),e=fc.bind(null,e,t,n),t.then(e,e))}function fc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ns===e&&(ls&n)===n&&(4===fs||3===fs&&(62914560&ls)===ls&&300>ee()-ks?!(2&ts)&&Bs(e,0):ms|=n,gs===ls&&(gs=0)),wc(e)}function dc(e,t){0===t&&(t=Se()),null!==(e=Lr(e,t))&&(Ee(e,t),wc(e))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),dc(e,n)}function mc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),dc(e,n)}var hc=null,gc=null,vc=!1,yc=!1,bc=!1,kc=0;function wc(e){e!==gc&&null===e.next&&(null===gc?hc=gc=e:gc=gc.next=e),yc=!0,vc||(vc=!0,ff(function(){6&ts?K(ne,xc):Ec()}))}function Sc(e,t){if(!bc&&yc){bc=!0;do{for(var n=!1,r=hc;null!==r;){if(!t)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-de(42|e)+1)-1,a=201326741&(a&=l&~(o&~i))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,Nc(r,a))}else a=ls,!(3&(a=ye(r,r===ns?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||be(r,a)||(n=!0,Nc(r,a));r=r.next}}while(n);bc=!1}}function xc(){Ec()}function Ec(){yc=vc=!1;var e,t=0;0!==kc&&(((e=window.event)&&"popstate"===e.type?e!==of&&(of=e,!0):(of=null,!1))&&(t=kc),kc=0);for(var n=ee(),r=null,l=hc;null!==l;){var a=l.next,o=Cc(l,n);0===o?(l.next=null,null===r?hc=a:r.next=a,null===a&&(gc=r)):(r=l,(0!==t||3&o)&&(yc=!0)),l=a}Sc(t,!1)}function Cc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var o=31-de(a),i=1<<o,u=l[o];-1===u?0!==(i&n)&&0===(i&r)||(l[o]=ke(i,t)):u<=t&&(e.expiredLanes|=i),a&=~i}if(n=ls,n=ye(e,e===(t=ns)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===as||9===as)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&X(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||be(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&X(r),Pe(n)){case 2:case 8:n=re;break;case 32:default:n=le;break;case 268435456:n=oe}return r=_c.bind(null,e),n=K(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&X(r),e.callbackPriority=2,e.callbackNode=null,2}function _c(e,t){if(0!==Es&&5!==Es)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(oc()&&e.callbackNode!==n)return null;var r=ls;return 0===(r=ye(e,e===ns?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Ds(e,r,t),Cc(e,ee()),null!=e.callbackNode&&e.callbackNode===n?_c.bind(null,e):null)}function Nc(e,t){if(oc())return null;Ds(e,t,!0)}function Pc(){return 0===kc&&(kc=we()),kc}function zc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function Lc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Tc=0;Tc<kr.length;Tc++){var Oc=kr[Tc];wr(Oc.toLowerCase(),"on"+(Oc[0].toUpperCase()+Oc.slice(1)))}wr(dr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(mr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(hr,"onTransitionRun"),wr(gr,"onTransitionStart"),wr(vr,"onTransitionCancel"),wr(yr,"onTransitionEnd"),Ge("onMouseEnter",["mouseout","mouseover"]),Ge("onMouseLeave",["mouseout","mouseover"]),Ge("onPointerEnter",["pointerout","pointerover"]),Ge("onPointerLeave",["pointerout","pointerover"]),Qe("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Qe("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Qe("onBeforeInput",["compositionend","keypress","textInput","paste"]),Qe("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Rc));function Ac(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){gi(e)}l.currentTarget=null,a=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){gi(e)}l.currentTarget=null,a=u}}}}function Dc(e,t){var n=t[Me];void 0===n&&(n=t[Me]=new Set);var r=e+"__bubble";n.has(r)||(Uc(t,e,2,!1),n.add(r))}function Fc(e,t,n){var r=0;t&&(r|=4),Uc(n,e,r,t)}var jc="_reactListening"+Math.random().toString(36).slice(2);function Ic(e){if(!e[jc]){e[jc]=!0,We.forEach(function(t){"selectionchange"!==t&&(Mc.has(t)||Fc(t,!1,e),Fc(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jc]||(t[jc]=!0,Fc("selectionchange",!1,t))}}function Uc(e,t,n,r){switch(id(t)){case 2:var l=td;break;case 8:l=nd;break;default:l=rd}n=l.bind(null,t,n,e),l=void 0,!jt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(l=!0),r?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function Hc(e,t,n,r,l){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var u=r.stateNode.containerInfo;if(u===l)break;if(4===o)for(o=r.return;null!==o;){var s=o.tag;if((3===s||4===s)&&o.stateNode.containerInfo===l)return;o=o.return}for(;null!==u;){if(null===(o=Ue(u)))return;if(5===(s=o.tag)||6===s||26===s||27===s){r=a=o;continue e}u=u.parentNode}}r=r.return}At(function(){var r=a,l=Lt(n),o=[];e:{var u=br.get(e);if(void 0!==u){var s=Jt,c=e;switch(e){case"keypress":if(0===$t(n))break e;case"keydown":case"keyup":s=mn;break;case"focusin":c="focus",s=ln;break;case"focusout":c="blur",s=ln;break;case"beforeblur":case"afterblur":s=ln;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=gn;break;case dr:case pr:case mr:s=an;break;case yr:s=vn;break;case"scroll":case"scrollend":s=en;break;case"wheel":s=yn;break;case"copy":case"cut":case"paste":s=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=hn;break;case"toggle":case"beforetoggle":s=bn}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==u?u+"Capture":null:u;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=Dt(h,p))&&f.push(Bc(h,g,m)),d)break;h=h.return}0<f.length&&(u=new s(u,c,null,n,l),o.push({event:u,listeners:f}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===zt||!(c=n.relatedTarget||n.fromElement)||!Ue(c)&&!c[Re])&&(s||u)&&(u=l.window===l?l:(u=l.ownerDocument)?u.defaultView||u.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ue(c):null)&&(d=i(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(s=null,c=r),s!==c)){if(f=nn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=hn,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==s?u:Be(s),m=null==c?u:Be(c),(u=new f(g,h+"leave",s,n,l)).target=d,u.relatedTarget=m,g=null,Ue(l)===r&&((f=new f(p,h+"enter",c,n,l)).target=m,f.relatedTarget=d,g=f),d=g,s&&c)e:{for(p=c,h=0,m=f=s;m;m=$c(m))h++;for(m=0,g=p;g;g=$c(g))m++;for(;0<h-m;)f=$c(f),h--;for(;0<m-h;)p=$c(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break e;f=$c(f),p=$c(p)}f=null}else f=null;null!==s&&Wc(o,u,s,f,!1),null!==c&&null!==d&&Wc(o,d,c,f,!0)}if("select"===(s=(u=r?Be(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===s&&"file"===u.type)var v=Fn;else if(Tn(u))if(jn)v=Qn;else{v=Wn;var y=$n}else!(s=u.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==u.type&&"radio"!==u.type?r&&Ct(r.elementType)&&(v=Fn):v=qn;switch(v&&(v=v(e,r))?On(o,v,n,l):(y&&y(e,u,r),"focusout"===e&&r&&"number"===u.type&&null!=r.memoizedProps.value&&vt(u,"number",u.value)),y=r?Be(r):window,e){case"focusin":(Tn(y)||"true"===y.contentEditable)&&(nr=y,rr=r,lr=null);break;case"focusout":lr=rr=nr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,or(o,n,l);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":or(o,n,l)}var b;if(wn)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else zn?Nn(e,n)&&(k="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(k="onCompositionStart");k&&(En&&"ko"!==n.locale&&(zn||"onCompositionStart"!==k?"onCompositionEnd"===k&&zn&&(b=Vt()):(Ht="value"in(Ut=l)?Ut.value:Ut.textContent,zn=!0)),0<(y=Vc(r,k)).length&&(k=new un(k,e,null,n,l),o.push({event:k,listeners:y}),(b||null!==(b=Pn(n)))&&(k.data=b))),(b=xn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(_n=!0,Cn);case"textInput":return(e=t.data)===Cn&&_n?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!wn&&Nn(e,t)?(e=Vt(),Bt=Ht=Ut=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(k=Vc(r,"onBeforeInput")).length&&(y=new un("onBeforeInput","beforeinput",null,n,l),o.push({event:y,listeners:k}),y.data=b),function(e,t,n,r,l){if("submit"===t&&n&&n.stateNode===l){var a=zc((l[Oe]||null).action),o=r.submitter;o&&null!==(t=(t=o[Oe]||null)?zc(t.formAction):o.getAttribute("formAction"))&&(a=t,o=null);var i=new Jt("action","action",null,r,l);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==kc){var e=o?Lc(l,o):new FormData(l);Lo(n,{pending:!0,data:e,method:l.method,action:a},null,e)}}else"function"==typeof a&&(i.preventDefault(),e=o?Lc(l,o):new FormData(l),Lo(n,{pending:!0,data:e,method:l.method,action:a},a,e))},currentTarget:l}]})}}(o,e,r,n,l)}Ac(o,t)})}function Bc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vc(e,t){for(var n=t+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;if(5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=Dt(e,n))&&r.unshift(Bc(e,l,a)),null!=(l=Dt(e,t))&&r.push(Bc(e,l,a))),3===e.tag)return r;e=e.return}return[]}function $c(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Wc(e,t,n,r,l){for(var a=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,l?null!=(s=Dt(n,a))&&o.unshift(Bc(n,s,u)):l||null!=(s=Dt(n,a))&&o.push(Bc(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var qc=/\r\n?/g,Qc=/\u0000|\uFFFD/g;function Gc(e){return("string"==typeof e?e:""+e).replace(qc,"\n").replace(Qc,"")}function Yc(e,t){return t=Gc(t),Gc(e)===t}function Kc(){}function Xc(e,t,n,r,l,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":tt(e,"class",r);break;case"tabIndex":tt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":tt(e,n,r);break;case"style":Et(e,r,a);break;case"data":if("object"!==t){tt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Xc(e,t,"name",l.name,l,null),Xc(e,t,"formEncType",l.formEncType,l,null),Xc(e,t,"formMethod",l.formMethod,l,null),Xc(e,t,"formTarget",l.formTarget,l,null)):(Xc(e,t,"encType",l.encType,l,null),Xc(e,t,"method",l.method,l,null),Xc(e,t,"target",l.target,l,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Kc);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Dc("beforetoggle",e),Dc("toggle",e),et(e,"popover",r);break;case"xlinkActuate":nt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":nt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":nt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":nt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":nt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":nt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":nt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":nt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":nt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":et(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&et(e,n=_t.get(n)||n,r)}}function Jc(e,t,n,r,l,a){switch(n){case"style":Et(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Kc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(l=n.endsWith("Capture"),t=n.slice(2,l?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Oe]||null)?a[n]:null)&&e.removeEventListener(t,a,l),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):et(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,l)))}}function Zc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Dc("error",e),Dc("load",e);var r,l=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":l=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Xc(e,t,r,i,n,null)}}return a&&Xc(e,t,"srcSet",n.srcSet,n,null),void(l&&Xc(e,t,"src",n.src,n,null));case"input":Dc("invalid",e);var u=r=i=a=null,s=null,c=null;for(l in n)if(n.hasOwnProperty(l)){var f=n[l];if(null!=f)switch(l){case"name":a=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Xc(e,t,l,f,n,null)}}return gt(e,r,u,s,c,i,a,!1),void ct(e);case"select":for(a in Dc("invalid",e),l=i=r=null,n)if(n.hasOwnProperty(a)&&null!=(u=n[a]))switch(a){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":l=u;default:Xc(e,t,a,u,n,null)}return t=r,n=i,e.multiple=!!l,void(null!=t?yt(e,!!l,t,!1):null!=n&&yt(e,!!l,n,!0));case"textarea":for(i in Dc("invalid",e),r=a=l=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":l=u;break;case"defaultValue":a=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:Xc(e,t,i,u,n,null)}return kt(e,l,a,r),void ct(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(l=n[s])&&("selected"===s?e.selected=l&&"function"!=typeof l&&"symbol"!=typeof l:Xc(e,t,s,l,n,null));return;case"dialog":Dc("beforetoggle",e),Dc("toggle",e),Dc("cancel",e),Dc("close",e);break;case"iframe":case"object":Dc("load",e);break;case"video":case"audio":for(l=0;l<Rc.length;l++)Dc(Rc[l],e);break;case"image":Dc("error",e),Dc("load",e);break;case"details":Dc("toggle",e);break;case"embed":case"source":case"link":Dc("error",e),Dc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(l=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Xc(e,t,c,l,n,null)}return;default:if(Ct(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(l=n[f])&&Jc(e,t,f,l,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(l=n[u])&&Xc(e,t,u,l,n,null)}var ef=null,tf=null;function nf(e){return 9===e.nodeType?e:e.ownerDocument}function rf(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function lf(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function af(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var of=null,uf="function"==typeof setTimeout?setTimeout:void 0,sf="function"==typeof clearTimeout?clearTimeout:void 0,cf="function"==typeof Promise?Promise:void 0,ff="function"==typeof queueMicrotask?queueMicrotask:void 0!==cf?function(e){return cf.resolve(null).then(e).catch(df)}:uf;function df(e){setTimeout(function(){throw e})}function pf(e){return"head"===e}function mf(e,t){var n=t,r=0,l=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var o=e.ownerDocument;if(1&n&&wf(o.documentElement),2&n&&wf(o.body),4&n)for(wf(n=o.head),o=n.firstChild;o;){var i=o.nextSibling,u=o.nodeName;o[je]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===o.rel.toLowerCase()||n.removeChild(o),o=i}}if(0===l)return e.removeChild(a),void Cd(t);l--}else"$"===n||"$?"===n||"$!"===n?l++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);Cd(t)}function hf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":hf(n),Ie(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function vf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var yf=null;function bf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function kf(e,t,n){switch(t=nf(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}function wf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);Ie(e)}var Sf=new Map,xf=new Set;function Ef(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Cf=M.d;M.d={f:function(){var e=Cf.f(),t=Us();return e||t},r:function(e){var t=He(e);null!==t&&5===t.tag&&"form"===t.type?Oo(t):Cf.r(e)},D:function(e){Cf.D(e),Nf("dns-prefetch",e,null)},C:function(e,t){Cf.C(e,t),Nf("preconnect",e,t)},L:function(e,t,n){Cf.L(e,t,n);var r=_f;if(r&&e&&t){var l='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(l+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(l+='[imagesizes="'+mt(n.imageSizes)+'"]')):l+='[href="'+mt(e)+'"]';var a=l;switch(t){case"style":a=zf(e);break;case"script":a=Of(e)}Sf.has(a)||(e=f({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),Sf.set(a,e),null!==r.querySelector(l)||"style"===t&&r.querySelector(Lf(a))||"script"===t&&r.querySelector(Rf(a))||(Zc(t=r.createElement("link"),"link",e),$e(t),r.head.appendChild(t)))}},m:function(e,t){Cf.m(e,t);var n=_f;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",l='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',a=l;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Of(e)}if(!Sf.has(a)&&(e=f({rel:"modulepreload",href:e},t),Sf.set(a,e),null===n.querySelector(l))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Rf(a)))return}Zc(r=n.createElement("link"),"link",e),$e(r),n.head.appendChild(r)}}},X:function(e,t){Cf.X(e,t);var n=_f;if(n&&e){var r=Ve(n).hoistableScripts,l=Of(e),a=r.get(l);a||((a=n.querySelector(Rf(l)))||(e=f({src:e,async:!0},t),(t=Sf.get(l))&&Ff(e,t),$e(a=n.createElement("script")),Zc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}},S:function(e,t,n){Cf.S(e,t,n);var r=_f;if(r&&e){var l=Ve(r).hoistableStyles,a=zf(e);t=t||"default";var o=l.get(a);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(Lf(a)))i.loading=5;else{e=f({rel:"stylesheet",href:e,"data-precedence":t},n),(n=Sf.get(a))&&Df(e,n);var u=o=r.createElement("link");$e(u),Zc(u,"link",e),u._p=new Promise(function(e,t){u.onload=e,u.onerror=t}),u.addEventListener("load",function(){i.loading|=1}),u.addEventListener("error",function(){i.loading|=2}),i.loading|=4,Af(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},l.set(a,o)}}},M:function(e,t){Cf.M(e,t);var n=_f;if(n&&e){var r=Ve(n).hoistableScripts,l=Of(e),a=r.get(l);a||((a=n.querySelector(Rf(l)))||(e=f({src:e,async:!0,type:"module"},t),(t=Sf.get(l))&&Ff(e,t),$e(a=n.createElement("script")),Zc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}}};var _f="undefined"==typeof document?null:document;function Nf(e,t,n){var r=_f;if(r&&"string"==typeof t&&t){var l=mt(t);l='link[rel="'+e+'"][href="'+l+'"]',"string"==typeof n&&(l+='[crossorigin="'+n+'"]'),xf.has(l)||(xf.add(l),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(l)&&(Zc(t=r.createElement("link"),"link",e),$e(t),r.head.appendChild(t)))}}function Pf(e,t,n,r){var l,a,i,u,s=(s=V.current)?Ef(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=zf(n.href),(r=(n=Ve(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=zf(n.href);var c=Ve(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(Lf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),Sf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},Sf.set(e,n),c||(l=s,a=e,i=n,u=f.state,l.querySelector('link[rel="preload"][as="style"]['+a+"]")?u.loading=1:(a=l.createElement("link"),u.preload=a,a.addEventListener("load",function(){return u.loading|=1}),a.addEventListener("error",function(){return u.loading|=2}),Zc(a,"link",i),$e(a),l.head.appendChild(a))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Of(n),(r=(n=Ve(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function zf(e){return'href="'+mt(e)+'"'}function Lf(e){return'link[rel="stylesheet"]['+e+"]"}function Tf(e){return f({},e,{"data-precedence":e.precedence,precedence:null})}function Of(e){return'[src="'+mt(e)+'"]'}function Rf(e){return"script[async]"+e}function Mf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,$e(r),r;var l=f({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return $e(r=(e.ownerDocument||e).createElement("style")),Zc(r,"style",l),Af(r,n.precedence,e),t.instance=r;case"stylesheet":l=zf(n.href);var a=e.querySelector(Lf(l));if(a)return t.state.loading|=4,t.instance=a,$e(a),a;r=Tf(n),(l=Sf.get(l))&&Df(r,l),$e(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise(function(e,t){i.onload=e,i.onerror=t}),Zc(a,"link",r),t.state.loading|=4,Af(a,n.precedence,e),t.instance=a;case"script":return a=Of(n.src),(l=e.querySelector(Rf(a)))?(t.instance=l,$e(l),l):(r=n,(l=Sf.get(a))&&Ff(r=f({},n),l),$e(l=(e=e.ownerDocument||e).createElement("script")),Zc(l,"link",r),e.head.appendChild(l),t.instance=l);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Af(r,n.precedence,e));return t.instance}function Af(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)a=i;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Df(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ff(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var jf=null;function If(e,t,n){if(null===jf){var r=new Map,l=jf=new Map;l.set(n,r)}else(r=(l=jf).get(n))||(r=new Map,l.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),l=0;l<n.length;l++){var a=n[l];if(!(a[je]||a[Te]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var o=a.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(a):r.set(o,[a])}}return r}function Uf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Hf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Bf=null;function Vf(){}function $f(){if(this.count--,0===this.count)if(this.stylesheets)qf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Wf=null;function qf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Wf=new Map,t.forEach(Qf,e),Wf=null,$f.call(e))}function Qf(e,t){if(!(4&t.state.loading)){var n=Wf.get(e);if(n)var r=n.get(null);else{n=new Map,Wf.set(e,n);for(var l=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<l.length;a++){var o=l[a];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(l=t.instance).getAttribute("data-precedence"),(a=n.get(o)||r)===r&&n.set(null,l),n.set(o,l),this.count++,r=$f.bind(this),l.addEventListener("load",r),l.addEventListener("error",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),t.state.loading|=4}}var Gf={$$typeof:k,Provider:null,Consumer:null,_currentValue:A,_currentValue2:A,_threadCount:0};function Yf(e,t,n,r,l,a,o,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=xe(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=xe(0),this.hiddenUpdates=xe(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Kf(e,t,n,r,l,a){l=function(e){return e?e=Rr:Rr}(l),null===r.context?r.context=l:r.pendingContext=l,(r=ra(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=la(e,r,t))&&(As(n,0,t),aa(n,e,t))}function Xf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Jf(e,t){Xf(e,t),(e=e.alternate)&&Xf(e,t)}function Zf(e){if(13===e.tag){var t=Lr(e,67108864);null!==t&&As(t,0,67108864),Jf(e,67108864)}}var ed=!0;function td(e,t,n,r){var l=R.T;R.T=null;var a=M.p;try{M.p=2,rd(e,t,n,r)}finally{M.p=a,R.T=l}}function nd(e,t,n,r){var l=R.T;R.T=null;var a=M.p;try{M.p=8,rd(e,t,n,r)}finally{M.p=a,R.T=l}}function rd(e,t,n,r){if(ed){var l=ld(r);if(null===l)Hc(e,t,r,ad,n),gd(e,r);else if(function(e,t,n,r,l){switch(t){case"focusin":return sd=vd(sd,e,t,n,r,l),!0;case"dragenter":return cd=vd(cd,e,t,n,r,l),!0;case"mouseover":return fd=vd(fd,e,t,n,r,l),!0;case"pointerover":var a=l.pointerId;return dd.set(a,vd(dd.get(a)||null,e,t,n,r,l)),!0;case"gotpointercapture":return a=l.pointerId,pd.set(a,vd(pd.get(a)||null,e,t,n,r,l)),!0}return!1}(l,e,t,n,r))r.stopPropagation();else if(gd(e,r),4&t&&-1<hd.indexOf(e)){for(;null!==l;){var a=He(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=ve(a.pendingLanes);if(0!==o){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-de(o);i.entanglements[1]|=u,o&=~u}wc(a),!(6&ts)&&(ws=ee()+500,Sc(0,!1))}}break;case 13:null!==(i=Lr(a,2))&&As(i,0,2),Us(),Jf(a,2)}if(null===(a=ld(r))&&Hc(e,t,r,ad,n),a===l)break;l=a}null!==l&&r.stopPropagation()}else Hc(e,t,r,null,n)}}function ld(e){return od(e=Lt(e))}var ad=null;function od(e){if(ad=null,null!==(e=Ue(e))){var t=i(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=u(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return ad=e,null}function id(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(te()){case ne:return 2;case re:return 8;case le:case ae:return 32;case oe:return 268435456;default:return 32}default:return 32}}var ud=!1,sd=null,cd=null,fd=null,dd=new Map,pd=new Map,md=[],hd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function gd(e,t){switch(e){case"focusin":case"focusout":sd=null;break;case"dragenter":case"dragleave":cd=null;break;case"mouseover":case"mouseout":fd=null;break;case"pointerover":case"pointerout":dd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pd.delete(t.pointerId)}}function vd(e,t,n,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==t&&null!==(t=He(t))&&Zf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l),e)}function yd(e){var t=Ue(e.target);if(null!==t){var n=i(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=u(n)))return e.blockedOn=t,void function(e){var t=M.p;try{return M.p=e,function(){if(13===n.tag){var e=Rs();e=Ne(e);var t=Lr(n,e);null!==t&&As(t,0,e),Jf(n,e)}}()}finally{M.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=ld(e.nativeEvent);if(null!==n)return null!==(t=He(n))&&Zf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);zt=r,n.target.dispatchEvent(r),zt=null,t.shift()}return!0}function kd(e,t,n){bd(e)&&n.delete(t)}function wd(){ud=!1,null!==sd&&bd(sd)&&(sd=null),null!==cd&&bd(cd)&&(cd=null),null!==fd&&bd(fd)&&(fd=null),dd.forEach(kd),pd.forEach(kd)}function Sd(e,t){e.blockedOn===t&&(e.blockedOn=null,ud||(ud=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,wd)))}var xd=null;function Ed(e){xd!==e&&(xd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,function(){xd===e&&(xd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],l=e[t+2];if("function"!=typeof r){if(null===od(r||n))continue;break}var a=He(n);null!==a&&(e.splice(t,3),t-=3,Lo(a,{pending:!0,data:l,method:n.method,action:r},r,l))}}))}function Cd(e){function t(t){return Sd(t,e)}null!==sd&&Sd(sd,e),null!==cd&&Sd(cd,e),null!==fd&&Sd(fd,e),dd.forEach(t),pd.forEach(t);for(var n=0;n<md.length;n++){var r=md[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<md.length&&null===(n=md[0]).blockedOn;)yd(n),null===n.blockedOn&&md.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var l=n[r],a=n[r+1],o=l[Oe]||null;if("function"==typeof a)o||Ed(n);else if(o){var i=null;if(a&&a.hasAttribute("formAction")){if(l=a,o=a[Oe]||null)i=o.formAction;else if(null!==od(l))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),Ed(n)}}}function _d(e){this._internalRoot=e}function Nd(e){this._internalRoot=e}Nd.prototype.render=_d.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Kf(t.current,Rs(),e,t,null,null)},Nd.prototype.unmount=_d.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Kf(e.current,2,null,e,null,null),Us(),t[Re]=null}},Nd.prototype.unstable_scheduleHydration=function(e){if(e){var t=ze();e={blockedOn:null,target:e,priority:t};for(var n=0;n<md.length&&0!==t&&t<md[n].priority;n++);md.splice(n,0,e),0===n&&yd(e)}};var Pd=l.version;if("19.1.1"!==Pd)throw Error(o(527,Pd,"19.1.1"));M.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=i(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){n=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===n)return s(l),e;if(a===r)return s(l),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=l,r=a;else{for(var u=!1,c=l.child;c;){if(c===n){u=!0,n=l,r=a;break}if(c===r){u=!0,r=l,n=a;break}c=c.sibling}if(!u){for(c=a.child;c;){if(c===n){u=!0,n=a,r=l;break}if(c===r){u=!0,r=a,n=l;break}c=c.sibling}if(!u)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?c(e):null)?null:e.stateNode};var zd={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:R,reconcilerVersion:"19.1.1"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Ld=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ld.isDisabled&&Ld.supportsFiber)try{se=Ld.inject(zd),ce=Ld}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));var n,r=!1,l="",a=vi,i=yi,u=bi;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(l=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(i=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,l,a,o,i,u,s,c,f){return e=new Yf(e,t,n,o,i,u,s,f),t=1,!0===a&&(t|=24),a=Ar(3,null,null,t),e.current=a,a.stateNode=e,(t=Ol()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},ta(a),e}(e,1,!1,null,0,r,l,a,i,u,0,null),e[Re]=t.current,Ic(e),new _d(t)}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,l=e[r];if(!(0<a(l,t)))break e;e[r]=t,e[n]=l,n=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,l=e.length,o=l>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>a(u,n))s<l&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<l&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,k="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)l(c);else{if(!(t.startTime<=e))break;l(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,E||(E=!0,x());else{var t=r(c);null!==t&&O(S,t.startTime-e)}}var x,E=!1,C=-1,_=5,N=-1;function P(){return!(!v&&t.unstable_now()-N<_)}function z(){if(v=!1,E){var e=t.unstable_now();N=e;var n=!0;try{e:{h=!1,g&&(g=!1,b(C),C=-1),m=!0;var a=p;try{t:{for(w(e),d=r(s);null!==d&&!(d.expirationTime>e&&P());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,w(e),n=!0;break t}d===r(s)&&l(s),w(e)}else l(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&O(S,u.startTime-e),n=!1}}break e}finally{d=null,p=a,m=!1}n=void 0}}finally{n?x():E=!1}}}if("function"==typeof k)x=function(){k(z)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,T=L.port2;L.port1.onmessage=z,x=function(){T.postMessage(null)}}else x=function(){y(z,0)};function O(e,n){C=y(function(){e(t.unstable_now())},n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){v=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,l,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(g?(b(C),C=-1):g=!0,O(S,a-o))):(e.sortIndex=i,n(s,e),h||m||(h=!0,E||(E=!0,x()))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},698:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function l(e,t,r){var l=null;if(void 0!==r&&(l=""+r),void 0!==t.key&&(l=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:l,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=l,t.jsxs=l},848:(e,t,n)=>{e.exports=n(698)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var k=b.prototype=new y;k.constructor=b,h(k,v.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S={H:null,A:null,T:null,S:null,V:null},x=Object.prototype.hasOwnProperty;function E(e,t,r,l,a,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,function(e){return r[e]})):t.toString(36);var n,r}function P(){}function z(e,t,l,a,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return z((c=e._init)(e._payload),t,l,a,o)}}if(c)return o=o(e),c=""===a?"."+N(e,0):a,w(o)?(l="",null!=c&&(l=c.replace(_,"$&/")+"/"),z(o,t,l,"",function(e){return e})):null!=o&&(C(o)&&(u=o,s=l+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(_,"$&/")+"/")+c,o=E(u.type,s,void 0,0,0,u.props)),t.push(o)),1;c=0;var f,m=""===a?".":a+":";if(w(e))for(var h=0;h<e.length;h++)c+=z(a=e[h],t,l,i=m+N(a,h),o);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=z(a=a.value,t,l,i=m+N(a,h++),o);else if("object"===i){if("function"==typeof e.then)return z(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then(function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)},function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)})),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,l,a,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function L(e,t,n){if(null==e)return e;var r=[],l=0;return z(e,r,"","",function(e){return t.call(n,e,l++)}),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)},function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:L,forEach:function(e,t,n){L(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return L(e,function(){t++}),t},toArray:function(e){return L(e,function(e){return e})||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=l,t.Profiler=o,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return S.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),l=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(l=""+t.key),t)!x.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var o=Array(a),i=0;i<a;i++)o[i]=arguments[i+2];r.children=o}return E(e.type,l,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,l={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(l[r]=t[r]);var o=arguments.length-2;if(1===o)l.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];l.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===l[r]&&(l[r]=o[r]);return E(e,a,void 0,0,0,l)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),l=S.S;null!==l&&l(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,O)}catch(e){O(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=S.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.1.1"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}var r=n(848),l=n(338),a=n(540);const o=(0,a.createContext)(void 0),i=()=>{const e=(0,a.useContext)(o);if(void 0===e)throw new Error("Game context is undefined");return e},u=(e,t)=>e+""+t,s=(e,t)=>{const n=performance.now(),r=()=>{performance.now()-n>=t?e():requestAnimationFrame(r)};requestAnimationFrame(r)},c=(e,t)=>{let n=0,r=0;const l={};for(let a=e.length-1;a>=0;a--)0===e[a]?n++:n>0&&(l[u(t,a)]=n,r=n);return{fallen:l,maxFallen:r}},f=(e,t,n)=>{const r=e.map(e=>e[t]),l=r[n];r[n]=0;let a=0,o=!1;for(let e=n+1;e<r.length;e++)if(0===r[e])a++;else{if(l!==r[e]||o)break;o=!0,a++}return{fallen:{[u(t,n)]:a},newColumn:r}},d={0:"#43AA8B",1:"#6A0572",2:"#577590",3:"#c0d2a0",4:"#ffbd5f",5:"#ae5865",6:"#F79D84",7:"#FF6B6B",8:"#6441a4",9:"#6b6bff"},p=(e,t,n,r,l,a,o)=>{const i=n-(e+l),u=r-(t+l);return{x:Math.floor(i/a),y:Math.floor(u/o)}},m=e=>{const{cells:t,setCells:n,setFallen:l,maxNumber:o,setMaxNumber:m,setScore:h,cellsBlockCoordsRef:g,boardBlockedRef:v,sizesRef:y}=i(),b=(0,a.useRef)(null),k=(0,a.useRef)({x:0,y:0}),w=(0,a.useRef)({now:{x:-1,y:-1},prev:{x:-1,y:-1}});let S=!1;const x=(y.current.CELL_HEIGHT+y.current.CELL_GAP)*e.fall,E=()=>{document.body.removeEventListener("touchmove",T),document.body.removeEventListener("mousemove",z),document.body.removeEventListener("touchend",L),document.body.removeEventListener("mouseup",P)},C=()=>{b.current&&(b.current.style.transform="translate(0px, 0px)")},_=(r,a)=>{if(S=!0,b.current){const e=r-k.current.x,t=a-k.current.y;b.current.style.transform=`translate(${e}px, ${t}px)`}if(v.current)return;const{x:i,y:u}=p(g.current.x,g.current.y,r,a,y.current.PADDING_CELLS_BLOCK,y.current.ONE_CELL_WIDTH,y.current.ONE_CELL_HEIGHT);if(i<0||i>=y.current.CELLS_IN_ROW_COUNT||u<0||u>=y.current.CELLS_IN_COLUMN_COUNT)return E(),void C();const d=t[u][i];if(w.current.now.x===i&&w.current.now.y===u||(w.current.prev.x=w.current.now.x,w.current.prev.y=w.current.now.y,w.current.now.x=i,w.current.now.y=u),0===d||i===e.x&&u===e.y)return;let x,_=-1,N=0;if(d===e.value){t[u][i]++,t[e.y][e.x]=0,N+=t[u][i],t[u][i]>o&&(_=t[u][i]);const n=t.map(t=>t[e.x]);x=c(n,e.x).fallen}else{const n=-1===w.current.prev.x?e.x:w.current.prev.x,r=-1===w.current.prev.y?e.y:w.current.prev.y;t[e.y][e.x]=0,t[r][n]=e.value;const l=f(t,n,r),a=e.x===n?l.newColumn:t.map(t=>t[e.x]),o=c(a,e.x);x=Object.assign(Object.assign({},l.fallen),o.fallen)}_>0&&m(_),h(e=>e+N),l(x),n([...t]),s(()=>{C()},150),E()},N=(r,a)=>{if(S=!1,!v.current){const{x:o,y:i}=p(g.current.x,g.current.y,r,a,y.current.PADDING_CELLS_BLOCK,y.current.ONE_CELL_WIDTH,y.current.ONE_CELL_HEIGHT);if(o>=0&&o<y.current.CELLS_IN_ROW_COUNT&&i>=0&&i<y.current.CELLS_IN_COLUMN_COUNT&&0===t[i][o]){t[e.y][e.x]=0,t[i][o]=e.value;let r,a=f(t,o,i);if(e.x===o)r=c(a.newColumn,e.x),a.fallen[u(o,i)]+=r.maxFallen;else{const n=t.map(t=>t[e.x]);r=c(n,e.x)}a.fallen=Object.assign(Object.assign({},a.fallen),r.fallen),l(a.fallen),n([...t])}}k.current.x=0,k.current.y=0,C(),E()},P=e=>{N(e.clientX,e.clientY)},z=e=>{_(e.clientX,e.clientY)},L=e=>{N(e.changedTouches[0].clientX,e.changedTouches[0].clientY)},T=e=>{_(e.changedTouches[0].clientX,e.changedTouches[0].clientY)};return(0,a.useEffect)(()=>()=>{S&&(S=!1,C()),E()},[t]),(0,r.jsx)("div",{className:"ntWPQaYgphYn39tkal8M","data-value":e.value,children:(0,r.jsx)("div",{className:"Y6MGieyW_BKI1Z9Zzeet",ref:b,style:{backgroundColor:(O=e.value,0===O?"":d[O%10]),transform:`translate(0px, ${x}px)`,transitionDuration:0!==e.fall?"150ms":""},onMouseDown:e=>{S=!0,k.current.x=e.clientX,k.current.y=e.clientY,document.body.addEventListener("mousemove",z),document.body.addEventListener("mouseup",P)},onTouchStart:e=>{S=!0,k.current.x=e.changedTouches[0].clientX,k.current.y=e.changedTouches[0].clientY,document.body.addEventListener("touchmove",T),document.body.addEventListener("touchend",L)},children:e.value})});var O},h=()=>{const{cells:e,fallen:t,cellsBlockRef:n,cellsBlockCoordsRef:l,startTime:o}=i();return(0,a.useEffect)(()=>{if(n.current){const{x:e,y:t}=n.current.getBoundingClientRect();l.current={x:e,y:t}}},[o]),(0,r.jsx)("div",{className:"FxxY222OnsqdUD5EKFd2",ref:n,children:e.map((e,n)=>e.map((e,l)=>{var a;const o=u(l,n);return(0,r.jsx)(m,{value:e,x:l,y:n,fall:null!==(a=t[o])&&void 0!==a?a:0},o)}))})},g=()=>(0,r.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[(0,r.jsx)("path",{stroke:"none",d:"M0 0h24v24H0z",fill:"none"}),(0,r.jsx)("path",{d:"M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4"}),(0,r.jsx)("path",{d:"M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"})]}),v={ru:{title:"Каскад 6х8",pause:"Пауза",gameOver:"Игра окончена"},en:{title:"Cascade 6x8",pause:"Paused",gameOver:"Game over"}},y=()=>{const{startNewGame:e,language:t}=i();return(0,r.jsxs)("div",{className:"ruSjW9YwSYrMsz4VBOe_",children:[(0,r.jsx)("div",{className:"QkDxcANWG_bxGtySw_G3",children:v[t].gameOver}),(0,r.jsx)("button",{className:"E0ln55kssBuxNHvWD5Oa",onClick:()=>e(),children:(0,r.jsx)(g,{})})]})};var b="nLjNGhBZvwiDdV6Umt21";const k=()=>(0,r.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"#0e0e10",children:[(0,r.jsx)("path",{stroke:"none",d:"M0 0h24v24H0z",fill:"none"}),(0,r.jsx)("path",{d:"M6 4v16a1 1 0 0 0 1.524 .852l13 -8a1 1 0 0 0 0 -1.704l-13 -8a1 1 0 0 0 -1.524 .852z"})]}),w=15e3,S="stone_merge_best_score",x="stone_merge_language",E=()=>(0,r.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[(0,r.jsx)("path",{stroke:"none",d:"M0 0h24v24H0z",fill:"none"}),(0,r.jsx)("path",{d:"M5 12l-2 0l9 -9l9 9l-2 0"}),(0,r.jsx)("path",{d:"M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"}),(0,r.jsx)("path",{d:"M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"})]}),C=()=>{const{startNewGame:e,setPaused:t,setLanguage:n,language:l,setStarted:a}=i();return(0,r.jsxs)("div",{className:"VBnStjup0P6PtIr98ecR",children:[(0,r.jsx)("div",{className:"iFnntXNtOLa06kQvS9zZ",children:v[l].pause}),(0,r.jsxs)("div",{className:"k0UkQEI37Dj9gakLecnW",children:[(0,r.jsx)("button",{className:b,onClick:()=>t(!1),children:(0,r.jsx)(k,{})}),(0,r.jsx)("button",{className:b,onClick:()=>e(),children:(0,r.jsx)(g,{})}),(0,r.jsxs)("select",{className:"ut51H6CMFnIdqypKxsfA",value:l,onChange:e=>{localStorage.setItem(x,e.target.value),n(e.target.value)},children:[(0,r.jsx)("option",{value:"ru",children:"🇷🇺"}),(0,r.jsx)("option",{value:"en",children:"🇬🇧"})]}),(0,r.jsx)("button",{className:b,onClick:()=>{t(!1),a(!1)},children:(0,r.jsx)(E,{})})]})]})},_=(e,t,n,r)=>{r.textContent=e.toString();const l=performance.now(),a=t-e,o=i=>{const u=i-l,s=Math.min(u/n,1),c=e+a*s;r.textContent=Math.round(c).toString(),s<1?requestAnimationFrame(o):r.textContent=t.toString()};requestAnimationFrame(o)},N=()=>(0,r.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"#feffff",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[(0,r.jsx)("path",{stroke:"none",d:"M0 0h24v24H0z",fill:"none"}),(0,r.jsx)("path",{d:"M12 6l4 6l5 -4l-2 10h-14l-2 -10l5 4z"})]}),P=()=>(0,r.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"#feffff",children:[(0,r.jsx)("path",{stroke:"none",d:"M0 0h24v24H0z",fill:"none"}),(0,r.jsx)("path",{d:"M9 4h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h2a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2z"}),(0,r.jsx)("path",{d:"M17 4h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h2a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2z"})]}),z=()=>{const{score:e,bestScore:t,setPaused:n}=i(),l=(0,a.useRef)(e),o=(0,a.useRef)(t),u=(0,a.useRef)(null),s=(0,a.useRef)(null);return(0,a.useEffect)(()=>{u.current&&_(l.current,e,1e3,u.current),l.current=e},[e]),(0,a.useEffect)(()=>{s.current&&_(o.current,t,1e3,s.current),o.current=t},[t]),(0,r.jsxs)("div",{className:"HVkzNc64Wbv0aq81U3jl",children:[(0,r.jsxs)("div",{className:"VLaCdfmPz9GVlPf9lVJJ",children:[(0,r.jsxs)("div",{className:"inNCV2fp1DJ5iq6j5MKA",children:[(0,r.jsx)(N,{}),(0,r.jsx)("div",{ref:s,children:t})]}),(0,r.jsx)("div",{className:"fCpIfJYba_qch785Eoc6",children:(0,r.jsx)("button",{className:"nCGvsO3vlJRpQMYi82jR",onClick:()=>{n(!0)},children:(0,r.jsx)(P,{})})})]}),(0,r.jsx)("div",{className:"aYDxDZpGfowE_B9xJiVx",ref:u,children:e})]})},L=()=>{const{startNewGame:e,setLanguage:t,language:n}=i();return(0,r.jsxs)("div",{className:"l4Dscq1dFuHEUGkdocV3",children:[(0,r.jsx)("div",{className:"MI1VSP6Hmqk_M0I8AOdx",children:v[n].title}),(0,r.jsxs)("div",{className:"YZ4vSd9Orcwp7wZ7FYhm",children:[(0,r.jsx)("button",{className:"XEtnA6DaLB5UVKRljw5g",onClick:()=>e(),children:(0,r.jsx)(k,{})}),(0,r.jsxs)("select",{className:"UUogsFVtXQTp6auqPKdd",value:n,onChange:e=>{localStorage.setItem(x,e.target.value),t(e.target.value)},children:[(0,r.jsx)("option",{value:"ru",children:"🇷🇺"}),(0,r.jsx)("option",{value:"en",children:"🇬🇧"})]})]})]})},T=()=>(0,r.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"#feffff",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[(0,r.jsx)("path",{stroke:"none",d:"M0 0h24v24H0z",fill:"none"}),(0,r.jsx)("path",{d:"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"}),(0,r.jsx)("path",{d:"M12 12l-3 2"}),(0,r.jsx)("path",{d:"M12 7v5"})]}),O=()=>{const{cells:e,pushRowAtBottom:t,gameOver:n,startTime:l,paused:o,started:u,boardBlockedRef:s}=i(),c=(0,a.useRef)(null),f=(0,a.useRef)(performance.now()),d=(0,a.useRef)(0);return(0,a.useEffect)(()=>{if(!n&&!o&&u){let e;const n=r=>{if(r<=f.current+w){const t=100-(r-f.current)/w*100;if(f.current+w-r<=180&&(s.current=!0),c.current){let e;e=t>67?"#43AA8B":t>34?"#ffbd5f":"#FF6B6B",c.current.style.width=t+"%",c.current.style.backgroundColor=e}e=requestAnimationFrame(n)}else t(),f.current=performance.now()};return e=requestAnimationFrame(n),()=>{cancelAnimationFrame(e)}}},[e,n,o,u]),(0,a.useEffect)(()=>{o&&u?d.current=performance.now()-f.current:f.current=performance.now()-d.current},[o,u]),(0,a.useEffect)(()=>{u&&(f.current=performance.now())},[l,u]),(0,r.jsxs)("div",{className:"wifovqErQ3Xz9ezTxUx1",children:[(0,r.jsx)(T,{}),(0,r.jsx)("div",{className:"tVgCwsO5_LKnEvgnIFap",children:(0,r.jsx)("div",{ref:c,className:"AFg8N0yC1qyJ3EP8wBbU"})})]})},R=()=>{const{gameOver:e,paused:t,started:n}=i();return(0,r.jsxs)("div",{className:"W85n1rJkFIARCJFJbWyJ",children:[n?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(z,{}),(0,r.jsx)(O,{}),(0,r.jsx)(h,{})]}):(0,r.jsx)(L,{}),t&&(0,r.jsx)(C,{}),e&&(0,r.jsx)(y,{})]})},M=(e,t)=>Math.trunc(Math.random()*(t+1-e))+e,A=()=>{const e=Array.from({length:6},()=>Array.from({length:6},()=>0));for(let t=0;t<2;t++)e.push(Array.from({length:6},()=>M(1,5)));return e},D=()=>{const e=.01*Math.min(window.innerWidth,window.innerHeight),t=e*(window.innerHeight<=700?12:window.innerWidth<=560?15:8);return{VMIN:e,CELL_GAP:4,CELL_HEIGHT:t,CELLS_IN_COLUMN_COUNT:8,CELLS_IN_ROW_COUNT:6,ONE_CELL_HEIGHT:(8*t+28)/8,ONE_CELL_WIDTH:(6*t+20)/6,PADDING_CELLS_BLOCK:2*e}},F=()=>{const e=localStorage.getItem(S);return e?Number(e):0},j=()=>"ru",I=D(),U=e=>{const[t,n]=(0,a.useState)(A),[l,i]=(0,a.useState)({}),[c,f]=(0,a.useState)(5),[d,p]=(0,a.useState)(!1),[m,h]=(0,a.useState)(Date.now),[g,v]=(0,a.useState)(0),[y,b]=(0,a.useState)(F),[k,w]=(0,a.useState)(!1),[x,E]=(0,a.useState)(j),[C,_]=(0,a.useState)(!1),[N,P]=(0,a.useState)(!1),z=(0,a.useRef)(null),L=(0,a.useRef)({x:0,y:0}),T=(0,a.useRef)(!1),O=(0,a.useRef)(!1),R=(0,a.useRef)(I);return(0,a.useEffect)(()=>{const e=new ResizeObserver(()=>{R.current=D()});return e.observe(document.body),()=>{e.disconnect()}},[]),(0,a.useEffect)(()=>{const e=Object.keys(l).sort(O.current?(e,t)=>+e[1]-+t[1]:(e,t)=>+t[1]-+e[1]);let r=c,a=0;if(0!==e.length){if(e.forEach(e=>{const n=+e[0],o=+e[1],i=l[e];0!==i&&(t[o+i][n]===t[o][n]?(t[o+i][n]++,t[o][n]=0,a+=t[o+i][n],t[o+i][n]>r&&(r=t[o+i][n])):0===t[o+i][n]&&(t[o+i][n]=t[o][n],t[o][n]=0))}),O.current){const e=Array.from({length:6},()=>M(1,c));for(let n=0;n<t[t.length-1].length;n++)t[t.length-1][n]=e[n]}s(()=>{O.current=!1,T.current=!1,v(e=>e+a),n([...t]),i({}),f(r)},150)}},[l,t,c]),(0,a.useEffect)(()=>{g>y&&(localStorage.setItem(S,g.toString()),b(g))},[g]),(0,r.jsx)(o.Provider,{value:{cells:t,setCells:n,fallen:l,setFallen:i,maxNumber:c,setMaxNumber:f,gameOver:d,setGameOver:p,startTime:m,setStartTime:h,score:g,setScore:v,bestScore:y,setBestScore:b,paused:k,setPaused:w,language:x,setLanguage:E,started:C,setStarted:_,pushRowAtBottom:()=>{if(t[0].every(e=>0===e)){O.current=!0;const e={};t.forEach((t,n)=>{t.forEach((t,r)=>{0!==t&&(e[u(r,n)]=-1)})}),i(e)}else p(!0)},startNewGame:()=>{n(A()),i({}),p(!1),f(5),h(Date.now()),v(0),w(!1),_(!0),P(!0),T.current=!1},cellsBlockRef:z,cellsBlockCoordsRef:L,boardBlockedRef:T,sizesRef:R},children:e.children})},H=document.getElementById("root");(0,l.createRoot)(H).render((0,r.jsx)(()=>((0,a.useEffect)(()=>{const e=e=>{e.preventDefault()};return document.body.addEventListener("contextmenu",e),()=>{document.body.removeEventListener("contextmenu",e)}},[]),(0,r.jsx)(a.StrictMode,{children:(0,r.jsx)(U,{children:(0,r.jsx)(R,{})})})),{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,